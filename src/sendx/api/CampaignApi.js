/**
 * SendX REST API
 * # Introduction The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Campaign from '../model/Campaign';
import CampaignRequest from '../model/CampaignRequest';
import CreateResponse from '../model/CreateResponse';
import DeleteCampaign200Response from '../model/DeleteCampaign200Response';

/**
* Campaign service.
* @module sendx/api/CampaignApi
* @version 1.0.0
*/
export default class CampaignApi {

    /**
    * Constructs a new CampaignApi. 
    * @alias module:sendx/api/CampaignApi
    * @class
    * @param {module:sendx/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:sendx/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create Campaign
     * Create a new email campaign
     * @param {module:sendx/model/CampaignRequest} campaignRequest The campaign content
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sendx/model/CreateResponse} and HTTP response
     */
    createCampaignWithHttpInfo(campaignRequest) {
      let postBody = campaignRequest;
      // verify the required parameter 'campaignRequest' is set
      if (campaignRequest === undefined || campaignRequest === null) {
        throw new Error("Missing the required parameter 'campaignRequest' when calling createCampaign");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateResponse;
      return this.apiClient.callApi(
        '/campaign', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Campaign
     * Create a new email campaign
     * @param {module:sendx/model/CampaignRequest} campaignRequest The campaign content
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sendx/model/CreateResponse}
     */
    createCampaign(campaignRequest) {
      return this.createCampaignWithHttpInfo(campaignRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Campaign
     * Deletes a specific campaign by its campaignId.
     * @param {String} campaignId The ID of the campaign to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sendx/model/DeleteCampaign200Response} and HTTP response
     */
    deleteCampaignWithHttpInfo(campaignId) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteCampaign");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteCampaign200Response;
      return this.apiClient.callApi(
        '/campaign/{campaignId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Campaign
     * Deletes a specific campaign by its campaignId.
     * @param {String} campaignId The ID of the campaign to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sendx/model/DeleteCampaign200Response}
     */
    deleteCampaign(campaignId) {
      return this.deleteCampaignWithHttpInfo(campaignId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Edit Campaign
     * Submit edited content for a specific campaign.
     * @param {module:sendx/model/CampaignRequest} campaignRequest 
     * @param {String} campaignId The ID of the campaign to edit
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sendx/model/Campaign} and HTTP response
     */
    editCampaignWithHttpInfo(campaignRequest, campaignId) {
      let postBody = campaignRequest;
      // verify the required parameter 'campaignRequest' is set
      if (campaignRequest === undefined || campaignRequest === null) {
        throw new Error("Missing the required parameter 'campaignRequest' when calling editCampaign");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling editCampaign");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Campaign;
      return this.apiClient.callApi(
        '/campaign/{campaignId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Edit Campaign
     * Submit edited content for a specific campaign.
     * @param {module:sendx/model/CampaignRequest} campaignRequest 
     * @param {String} campaignId The ID of the campaign to edit
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sendx/model/Campaign}
     */
    editCampaign(campaignRequest, campaignId) {
      return this.editCampaignWithHttpInfo(campaignRequest, campaignId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get All Campaigns
     * Retrieve a list of all campaigns.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] Offset for pagination
     * @param {Number} [limit = 20)] Limit for pagination
     * @param {String} [search] Search term to filter campaigns
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:sendx/model/Campaign>} and HTTP response
     */
    getAllCampaignsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Campaign];
      return this.apiClient.callApi(
        '/campaign', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get All Campaigns
     * Retrieve a list of all campaigns.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Offset for pagination (default to 0)
     * @param {Number} opts.limit Limit for pagination (default to 20)
     * @param {String} opts.search Search term to filter campaigns
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:sendx/model/Campaign>}
     */
    getAllCampaigns(opts) {
      return this.getAllCampaignsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Campaign By Id
     * Retrieve a specific campaign using its ID.
     * @param {String} campaignId The ID of the campaign to retrieve.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sendx/model/Campaign} and HTTP response
     */
    getCampaignByIdWithHttpInfo(campaignId) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getCampaignById");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Campaign;
      return this.apiClient.callApi(
        '/campaign/{campaignId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Campaign By Id
     * Retrieve a specific campaign using its ID.
     * @param {String} campaignId The ID of the campaign to retrieve.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sendx/model/Campaign}
     */
    getCampaignById(campaignId) {
      return this.getCampaignByIdWithHttpInfo(campaignId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
