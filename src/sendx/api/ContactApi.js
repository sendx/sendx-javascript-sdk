/**
 * SendX REST API
 * # Introduction The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Contact from '../model/Contact';
import ContactRequest from '../model/ContactRequest';
import Response from '../model/Response';

/**
* Contact service.
* @module sendx/api/ContactApi
* @version 1.0.0
*/
export default class ContactApi {

    /**
    * Constructs a new ContactApi. 
    * @alias module:sendx/api/ContactApi
    * @class
    * @param {module:sendx/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:sendx/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a contact
     * Create Contact with given data
     * @param {module:sendx/model/ContactRequest} contactRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sendx/model/Response} and HTTP response
     */
    createContactWithHttpInfo(contactRequest) {
      let postBody = contactRequest;
      // verify the required parameter 'contactRequest' is set
      if (contactRequest === undefined || contactRequest === null) {
        throw new Error("Missing the required parameter 'contactRequest' when calling createContact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/contact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a contact
     * Create Contact with given data
     * @param {module:sendx/model/ContactRequest} contactRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sendx/model/Response}
     */
    createContact(contactRequest) {
      return this.createContactWithHttpInfo(contactRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Contact
     * Deletes Contact
     * @param {String} contactId The Contact ID to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sendx/model/Response} and HTTP response
     */
    deleteContactWithHttpInfo(contactId) {
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling deleteContact");
      }

      let pathParams = {
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/contact/{contactId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Contact
     * Deletes Contact
     * @param {String} contactId The Contact ID to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sendx/model/Response}
     */
    deleteContact(contactId) {
      return this.deleteContactWithHttpInfo(contactId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get All Contacts
     * Find all contacts with optional filters
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] Offset for pagination
     * @param {Number} [limit = 10)] Limit for pagination
     * @param {module:sendx/model/String} [contactType] Filter contacts by type
     * @param {String} [search] Search term to filter contacts
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:sendx/model/Contact>} and HTTP response
     */
    getAllContactsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'contactType': opts['contactType'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Contact];
      return this.apiClient.callApi(
        '/contact', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get All Contacts
     * Find all contacts with optional filters
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Offset for pagination (default to 0)
     * @param {Number} opts.limit Limit for pagination (default to 10)
     * @param {module:sendx/model/String} opts.contactType Filter contacts by type
     * @param {String} opts.search Search term to filter contacts
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:sendx/model/Contact>}
     */
    getAllContacts(opts) {
      return this.getAllContactsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Contact by ID
     * Retrieve a specific contact by its contactId.
     * @param {String} contactId The ID of the contact to retrieve.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sendx/model/Contact} and HTTP response
     */
    getContactByIdWithHttpInfo(contactId) {
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling getContactById");
      }

      let pathParams = {
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Contact;
      return this.apiClient.callApi(
        '/contact/{contactId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Contact by ID
     * Retrieve a specific contact by its contactId.
     * @param {String} contactId The ID of the contact to retrieve.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sendx/model/Contact}
     */
    getContactById(contactId) {
      return this.getContactByIdWithHttpInfo(contactId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Unsubscribe Contact
     * Unsubscribe a globally existing contact
     * @param {String} contactId The Contact ID to unsubscribe
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sendx/model/Response} and HTTP response
     */
    unsubscribeContactWithHttpInfo(contactId) {
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling unsubscribeContact");
      }

      let pathParams = {
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/contact/unsubscribe/{contactId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Unsubscribe Contact
     * Unsubscribe a globally existing contact
     * @param {String} contactId The Contact ID to unsubscribe
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sendx/model/Response}
     */
    unsubscribeContact(contactId) {
      return this.unsubscribeContactWithHttpInfo(contactId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Contact
     * Update Contact with given data
     * @param {module:sendx/model/ContactRequest} contactRequest 
     * @param {String} contactId The ID of the Contact to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sendx/model/Contact} and HTTP response
     */
    updateContactWithHttpInfo(contactRequest, contactId) {
      let postBody = contactRequest;
      // verify the required parameter 'contactRequest' is set
      if (contactRequest === undefined || contactRequest === null) {
        throw new Error("Missing the required parameter 'contactRequest' when calling updateContact");
      }
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling updateContact");
      }

      let pathParams = {
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Contact;
      return this.apiClient.callApi(
        '/contact/{contactId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Contact
     * Update Contact with given data
     * @param {module:sendx/model/ContactRequest} contactRequest 
     * @param {String} contactId The ID of the Contact to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sendx/model/Contact}
     */
    updateContact(contactRequest, contactId) {
      return this.updateContactWithHttpInfo(contactRequest, contactId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
