/**
 * SendX REST API
 * # Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateResponse from '../model/CreateResponse';
import DeleteResponse from '../model/DeleteResponse';
import ListModel from '../model/ListModel';
import ListRequest from '../model/ListRequest';
import Response from '../model/Response';

/**
* List service.
* @module sendx/api/ListApi
* @version 1.0.0
*/
export default class ListApi {

    /**
    * Constructs a new ListApi. 
    * @alias module:sendx/api/ListApi
    * @class
    * @param {module:sendx/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:sendx/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create List
     * Create a new list.
     * @param {module:sendx/model/ListRequest} listRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sendx/model/CreateResponse} and HTTP response
     */
    createListWithHttpInfo(listRequest) {
      let postBody = listRequest;
      // verify the required parameter 'listRequest' is set
      if (listRequest === undefined || listRequest === null) {
        throw new Error("Missing the required parameter 'listRequest' when calling createList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateResponse;
      return this.apiClient.callApi(
        '/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create List
     * Create a new list.
     * @param {module:sendx/model/ListRequest} listRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sendx/model/CreateResponse}
     */
    createList(listRequest) {
      return this.createListWithHttpInfo(listRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete List
     * Deletes a specific list by its ID.
     * @param {String} listId The ID of the list you want to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sendx/model/DeleteResponse} and HTTP response
     */
    deleteListWithHttpInfo(listId) {
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling deleteList");
      }

      let pathParams = {
        'listId': listId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteResponse;
      return this.apiClient.callApi(
        '/list/{listId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete List
     * Deletes a specific list by its ID.
     * @param {String} listId The ID of the list you want to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sendx/model/DeleteResponse}
     */
    deleteList(listId) {
      return this.deleteListWithHttpInfo(listId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get All Lists
     * Retrieve all lists for the account.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Offset for pagination.
     * @param {Number} [limit] Limit the number of results returned.
     * @param {String} [search] Search term to filter lists.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:sendx/model/ListModel>} and HTTP response
     */
    getAllListsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListModel];
      return this.apiClient.callApi(
        '/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get All Lists
     * Retrieve all lists for the account.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Offset for pagination.
     * @param {Number} opts.limit Limit the number of results returned.
     * @param {String} opts.search Search term to filter lists.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:sendx/model/ListModel>}
     */
    getAllLists(opts) {
      return this.getAllListsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get List
     * Retrieve a specific list by its ID.
     * @param {String} listId The ID of the list you want to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sendx/model/ListModel} and HTTP response
     */
    getListByIdWithHttpInfo(listId) {
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling getListById");
      }

      let pathParams = {
        'listId': listId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListModel;
      return this.apiClient.callApi(
        '/list/{listId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get List
     * Retrieve a specific list by its ID.
     * @param {String} listId The ID of the list you want to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sendx/model/ListModel}
     */
    getListById(listId) {
      return this.getListByIdWithHttpInfo(listId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update List
     * Update an existing list by its ID.
     * @param {module:sendx/model/ListRequest} listRequest 
     * @param {String} listId The ID of the list to be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sendx/model/Response} and HTTP response
     */
    updateListWithHttpInfo(listRequest, listId) {
      let postBody = listRequest;
      // verify the required parameter 'listRequest' is set
      if (listRequest === undefined || listRequest === null) {
        throw new Error("Missing the required parameter 'listRequest' when calling updateList");
      }
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling updateList");
      }

      let pathParams = {
        'listId': listId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/list/{listId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update List
     * Update an existing list by its ID.
     * @param {module:sendx/model/ListRequest} listRequest 
     * @param {String} listId The ID of the list to be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sendx/model/Response}
     */
    updateList(listRequest, listId) {
      return this.updateListWithHttpInfo(listRequest, listId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
