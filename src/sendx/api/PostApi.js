/**
 * SendX REST API
 * # SendX REST API Documentation  ## üöÄ Introduction  The SendX API is organized around REST principles. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  **Key Features:** - üîí **Security**: Team-based authentication with optional member-level access - üéØ **Resource-Oriented**: RESTful design with clear resource boundaries - üìä **Rich Data Models**: Three-layer model system (Input/Output/Internal) - üîó **Relationships**: Automatic prefix handling for resource relationships - üìà **Scalable**: Built for high-volume email marketing operations  ## üèóÔ∏è Architecture Overview  SendX uses a three-layer model architecture:  1. **Input Models** (`RestE*`): For API requests 2. **Output Models** (`RestR*`): For API responses with prefixed IDs 3. **Internal Models**: Core business logic (not exposed in API)  ## üîê Security & Authentication  SendX uses API key authentication:  ### Team API Key ```http X-Team-ApiKey: YOUR_TEAM_API_KEY ``` - **Required for all requests** - Team-level access to resources - Available in SendX Settings ‚Üí Team API Key  ## üÜî Encrypted ID System  SendX uses encrypted IDs for security and better developer experience:  - **Internal IDs**: Sequential integers (not exposed) - **Encrypted IDs**: 22-character alphanumeric strings - **Prefixed IDs**: Resource-type prefixes in API responses (`contact_<22-char-id>`)  ### ID Format  **All resource IDs follow this pattern:** ``` <resource_prefix>_<22_character_alphanumeric_string> ```  **Example:** ```json {   \"id\": \"contact_BnKjkbBBS500CoBCP0oChQ\",   \"lists\": [\"list_OcuxJHdiAvujmwQVJfd3ss\", \"list_0tOFLp5RgV7s3LNiHrjGYs\"],   \"tags\": [\"tag_UhsDkjL772Qbj5lWtT62VK\", \"tag_fL7t9lsnZ9swvx2HrtQ9wM\"] } ```  ## üìö Resource Prefixes  | Resource | Prefix | Example | |----------|--------|---------| | Contact | `contact_` | `contact_BnKjkbBBS500CoBCP0oChQ` | | Campaign | `campaign_` | `campaign_LUE9BTxmksSmqHWbh96zsn` | | List | `list_` | `list_OcuxJHdiAvujmwQVJfd3ss` | | Tag | `tag_` | `tag_UhsDkjL772Qbj5lWtT62VK` | | Sender | `sender_` | `sender_4vK3WFhMgvOwUNyaL4QxCD` | | Template | `template_` | `template_f3lJvTEhSjKGVb5Lwc5SWS` | | Custom Field | `field_` | `field_MnuqBAG2NPLm7PZMWbjQxt` | | Webhook | `webhook_` | `webhook_9l154iiXlZoPo7vngmamee` | | Post | `post_` | `post_XyZ123aBc456DeF789GhI` | | Post Category | `post_category_` | `post_category_YzS1wOU20yw87UUHKxMzwn` | | Post Tag | `post_tag_` | `post_tag_123XyZ456AbC` | | Member | `member_` | `member_JkL012MnO345PqR678` |  ## üéØ Best Practices  ### Error Handling - **Always check status codes**: 2xx = success, 4xx = client error, 5xx = server error - **Read error messages**: Descriptive messages help debug issues - **Handle rate limits**: Respect API rate limits for optimal performance  ### Data Validation - **Email format**: Must be valid email addresses - **Required fields**: Check documentation for mandatory fields - **Field lengths**: Respect maximum length constraints  ### Performance - **Pagination**: Use offset/limit for large datasets - **Batch operations**: Process multiple items when supported - **Caching**: Cache responses when appropriate  ## üõ†Ô∏è SDKs & Integration  Official SDKs available for: - [Golang](https://github.com/sendx/sendx-go-sdk) - [Python](https://github.com/sendx/sendx-python-sdk) - [Ruby](https://github.com/sendx/sendx-ruby-sdk) - [Java](https://github.com/sendx/sendx-java-sdk) - [PHP](https://github.com/sendx/sendx-php-sdk) - [JavaScript](https://github.com/sendx/sendx-javascript-sdk)  ## üìû Support  Need help? Contact us: - üí¨ **Website Chat**: Available on sendx.io - üìß **Email**: hello@sendx.io - üìö **Documentation**: Full guides at help.sendx.io  ---  **API Endpoint:** `https://api.sendx.io/api/v1/rest`  [<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\">](https://god.gw.postman.com/run-collection/33476323-44b198b0-5219-4619-a01f-cfc24d573885?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D33476323-44b198b0-5219-4619-a01f-cfc24d573885%26entityType%3Dcollection%26workspaceId%3D6b1e4f65-96a9-4136-9512-6266c852517e) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import MessageResponse from '../model/MessageResponse';
import RestEPost from '../model/RestEPost';
import RestRPost from '../model/RestRPost';

/**
* Post service.
* @module sendx/api/PostApi
* @version 1.0.0
*/
export default class PostApi {

    /**
    * Constructs a new PostApi. 
    * @alias module:sendx/api/PostApi
    * @class
    * @param {module:sendx/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:sendx/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create blog post
     * Creates a new blog post. 
     * @param {module:sendx/model/RestEPost} restEPost 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sendx/model/RestRPost} and HTTP response
     */
    createPostWithHttpInfo(restEPost) {
      let postBody = restEPost;
      // verify the required parameter 'restEPost' is set
      if (restEPost === undefined || restEPost === null) {
        throw new Error("Missing the required parameter 'restEPost' when calling createPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TeamApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestRPost;
      return this.apiClient.callApi(
        '/post', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create blog post
     * Creates a new blog post. 
     * @param {module:sendx/model/RestEPost} restEPost 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sendx/model/RestRPost}
     */
    createPost(restEPost) {
      return this.createPostWithHttpInfo(restEPost)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete post
     * Soft deletes a blog post.  **üéØ Key Features:** - Soft delete - Preserve data - Remove from listings 
     * @param {String} identifier Resource identifier with prefix (e.g., `contact_BnKjkbBBS500CoBCP0oChQ`)  **Format:** `<prefix>_<22-character-id>` 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sendx/model/MessageResponse} and HTTP response
     */
    deletePostWithHttpInfo(identifier) {
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling deletePost");
      }

      let pathParams = {
        'identifier': identifier
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TeamApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MessageResponse;
      return this.apiClient.callApi(
        '/post/{identifier}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete post
     * Soft deletes a blog post.  **üéØ Key Features:** - Soft delete - Preserve data - Remove from listings 
     * @param {String} identifier Resource identifier with prefix (e.g., `contact_BnKjkbBBS500CoBCP0oChQ`)  **Format:** `<prefix>_<22-character-id>` 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sendx/model/MessageResponse}
     */
    deletePost(identifier) {
      return this.deletePostWithHttpInfo(identifier)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all posts
     * Retrieves all blog posts with pagination.  **üéØ Key Features:** - Filter by status - Search functionality - Sort options - Include metadata 
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] Number of posts to skip
     * @param {Number} [limit = 10)] Maximum number of posts to return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:sendx/model/RestRPost>} and HTTP response
     */
    getAllPostsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TeamApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RestRPost];
      return this.apiClient.callApi(
        '/post', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all posts
     * Retrieves all blog posts with pagination.  **üéØ Key Features:** - Filter by status - Search functionality - Sort options - Include metadata 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Number of posts to skip (default to 0)
     * @param {Number} opts.limit Maximum number of posts to return (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:sendx/model/RestRPost>}
     */
    getAllPosts(opts) {
      return this.getAllPostsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get post by ID
     * Retrieves a specific blog post.  **üéØ Key Features:** - Full post content - SEO metadata - Related posts - Engagement metrics 
     * @param {String} identifier Resource identifier with prefix (e.g., `contact_BnKjkbBBS500CoBCP0oChQ`)  **Format:** `<prefix>_<22-character-id>` 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sendx/model/RestRPost} and HTTP response
     */
    getPostWithHttpInfo(identifier) {
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getPost");
      }

      let pathParams = {
        'identifier': identifier
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TeamApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestRPost;
      return this.apiClient.callApi(
        '/post/{identifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get post by ID
     * Retrieves a specific blog post.  **üéØ Key Features:** - Full post content - SEO metadata - Related posts - Engagement metrics 
     * @param {String} identifier Resource identifier with prefix (e.g., `contact_BnKjkbBBS500CoBCP0oChQ`)  **Format:** `<prefix>_<22-character-id>` 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sendx/model/RestRPost}
     */
    getPost(identifier) {
      return this.getPostWithHttpInfo(identifier)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update post
     * Updates an existing blog post.  **üéØ Key Features:** - Edit content - Update metadata - Change status - Modify tags/categories 
     * @param {module:sendx/model/RestEPost} restEPost 
     * @param {String} identifier Resource identifier with prefix (e.g., `contact_BnKjkbBBS500CoBCP0oChQ`)  **Format:** `<prefix>_<22-character-id>` 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sendx/model/RestRPost} and HTTP response
     */
    updatePostWithHttpInfo(restEPost, identifier) {
      let postBody = restEPost;
      // verify the required parameter 'restEPost' is set
      if (restEPost === undefined || restEPost === null) {
        throw new Error("Missing the required parameter 'restEPost' when calling updatePost");
      }
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling updatePost");
      }

      let pathParams = {
        'identifier': identifier
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TeamApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestRPost;
      return this.apiClient.callApi(
        '/post/{identifier}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update post
     * Updates an existing blog post.  **üéØ Key Features:** - Edit content - Update metadata - Change status - Modify tags/categories 
     * @param {module:sendx/model/RestEPost} restEPost 
     * @param {String} identifier Resource identifier with prefix (e.g., `contact_BnKjkbBBS500CoBCP0oChQ`)  **Format:** `<prefix>_<22-character-id>` 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sendx/model/RestRPost}
     */
    updatePost(restEPost, identifier) {
      return this.updatePostWithHttpInfo(restEPost, identifier)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
