/**
 * SendX REST API
 * # Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Sender from '../model/Sender';
import SenderRequest from '../model/SenderRequest';
import SenderResponse from '../model/SenderResponse';

/**
* Sender service.
* @module sendx/api/SenderApi
* @version 1.0.0
*/
export default class SenderApi {

    /**
    * Constructs a new SenderApi. 
    * @alias module:sendx/api/SenderApi
    * @class
    * @param {module:sendx/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:sendx/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create Sender
     * Creates a new sender in the system.
     * @param {module:sendx/model/SenderRequest} senderRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sendx/model/Sender} and HTTP response
     */
    createSenderWithHttpInfo(senderRequest) {
      let postBody = senderRequest;
      // verify the required parameter 'senderRequest' is set
      if (senderRequest === undefined || senderRequest === null) {
        throw new Error("Missing the required parameter 'senderRequest' when calling createSender");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Sender;
      return this.apiClient.callApi(
        '/sender', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Sender
     * Creates a new sender in the system.
     * @param {module:sendx/model/SenderRequest} senderRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sendx/model/Sender}
     */
    createSender(senderRequest) {
      return this.createSenderWithHttpInfo(senderRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get All Senders
     * Retrieve all senders for the team, with optional filters like offset, limit, and search.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] Number of records to skip
     * @param {Number} [limit = 10)] Maximum number of records to return
     * @param {String} [search] Search keyword to filter senders by name or email
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:sendx/model/SenderResponse>} and HTTP response
     */
    getAllSendersWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SenderResponse];
      return this.apiClient.callApi(
        '/sender', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get All Senders
     * Retrieve all senders for the team, with optional filters like offset, limit, and search.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Number of records to skip (default to 0)
     * @param {Number} opts.limit Maximum number of records to return (default to 10)
     * @param {String} opts.search Search keyword to filter senders by name or email
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:sendx/model/SenderResponse>}
     */
    getAllSenders(opts) {
      return this.getAllSendersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
