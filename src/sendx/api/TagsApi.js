/**
 * SendX REST API
 * # Introduction The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateResponse from '../model/CreateResponse';
import DeleteResponse from '../model/DeleteResponse';
import Response from '../model/Response';
import Tag from '../model/Tag';
import TagRequest from '../model/TagRequest';

/**
* Tags service.
* @module sendx/api/TagsApi
* @version 1.0.0
*/
export default class TagsApi {

    /**
    * Constructs a new TagsApi. 
    * @alias module:sendx/api/TagsApi
    * @class
    * @param {module:sendx/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:sendx/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a Tag
     * Create a new tag for the account
     * @param {module:sendx/model/TagRequest} tagRequest The tag content
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sendx/model/CreateResponse} and HTTP response
     */
    createTagWithHttpInfo(tagRequest) {
      let postBody = tagRequest;
      // verify the required parameter 'tagRequest' is set
      if (tagRequest === undefined || tagRequest === null) {
        throw new Error("Missing the required parameter 'tagRequest' when calling createTag");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateResponse;
      return this.apiClient.callApi(
        '/tag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Tag
     * Create a new tag for the account
     * @param {module:sendx/model/TagRequest} tagRequest The tag content
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sendx/model/CreateResponse}
     */
    createTag(tagRequest) {
      return this.createTagWithHttpInfo(tagRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Tag
     * Delete an existing tag by ID
     * @param {String} tagId ID of the tag to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sendx/model/DeleteResponse} and HTTP response
     */
    deleteTagWithHttpInfo(tagId) {
      let postBody = null;
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling deleteTag");
      }

      let pathParams = {
        'tagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteResponse;
      return this.apiClient.callApi(
        '/tag/{tagId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Tag
     * Delete an existing tag by ID
     * @param {String} tagId ID of the tag to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sendx/model/DeleteResponse}
     */
    deleteTag(tagId) {
      return this.deleteTagWithHttpInfo(tagId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get All Tags
     * Retrieve all tags for the account with optional pagination and search filters
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Offset for pagination
     * @param {Number} [limit] Limit the number of results
     * @param {String} [search] Search term to filter tags
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:sendx/model/Tag>} and HTTP response
     */
    getAllTagsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Tag];
      return this.apiClient.callApi(
        '/tag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get All Tags
     * Retrieve all tags for the account with optional pagination and search filters
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Offset for pagination
     * @param {Number} opts.limit Limit the number of results
     * @param {String} opts.search Search term to filter tags
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:sendx/model/Tag>}
     */
    getAllTags(opts) {
      return this.getAllTagsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a Tag by ID
     * Retrieve a tag based on the provided tag ID
     * @param {String} tagId ID of the tag you want to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sendx/model/Tag} and HTTP response
     */
    getTagByIdWithHttpInfo(tagId) {
      let postBody = null;
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling getTagById");
      }

      let pathParams = {
        'tagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/tag/{tagId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a Tag by ID
     * Retrieve a tag based on the provided tag ID
     * @param {String} tagId ID of the tag you want to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sendx/model/Tag}
     */
    getTagById(tagId) {
      return this.getTagByIdWithHttpInfo(tagId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Tag
     * Update an existing tag
     * @param {module:sendx/model/TagRequest} tagRequest The tag content
     * @param {String} tagId ID of the tag to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sendx/model/Response} and HTTP response
     */
    updateTagWithHttpInfo(tagRequest, tagId) {
      let postBody = tagRequest;
      // verify the required parameter 'tagRequest' is set
      if (tagRequest === undefined || tagRequest === null) {
        throw new Error("Missing the required parameter 'tagRequest' when calling updateTag");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling updateTag");
      }

      let pathParams = {
        'tagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/tag/{tagId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Tag
     * Update an existing tag
     * @param {module:sendx/model/TagRequest} tagRequest The tag content
     * @param {String} tagId ID of the tag to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sendx/model/Response}
     */
    updateTag(tagRequest, tagId) {
      return this.updateTagWithHttpInfo(tagRequest, tagId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
