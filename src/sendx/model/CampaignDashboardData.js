/**
 * SendX REST API
 * # Introduction The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CampaignDashboardData model module.
 * @module sendx/model/CampaignDashboardData
 * @version 1.0.0
 */
class CampaignDashboardData {
    /**
     * Constructs a new <code>CampaignDashboardData</code>.
     * @alias module:sendx/model/CampaignDashboardData
     */
    constructor() { 
        
        CampaignDashboardData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CampaignDashboardData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sendx/model/CampaignDashboardData} obj Optional instance to populate.
     * @return {module:sendx/model/CampaignDashboardData} The populated <code>CampaignDashboardData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CampaignDashboardData();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('sentTime')) {
                obj['sentTime'] = ApiClient.convertToType(data['sentTime'], 'Date');
            }
            if (data.hasOwnProperty('campaignScreenshotUrl')) {
                obj['campaignScreenshotUrl'] = ApiClient.convertToType(data['campaignScreenshotUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CampaignDashboardData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CampaignDashboardData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }
        // ensure the json data is a string
        if (data['campaignScreenshotUrl'] && !(typeof data['campaignScreenshotUrl'] === 'string' || data['campaignScreenshotUrl'] instanceof String)) {
            throw new Error("Expected the field `campaignScreenshotUrl` to be a primitive type in the JSON string but got " + data['campaignScreenshotUrl']);
        }

        return true;
    }

/**
     * Returns Unique identifier for the campaign.
     * @return {Number}
     */
    getId() {
        return this.id;
    }

    /**
     * Sets Unique identifier for the campaign.
     * @param {Number} id Unique identifier for the campaign.
     */
    setId(id) {
        this['id'] = id;
    }
/**
     * Returns Name of the campaign.
     * @return {String}
     */
    getName() {
        return this.name;
    }

    /**
     * Sets Name of the campaign.
     * @param {String} name Name of the campaign.
     */
    setName(name) {
        this['name'] = name;
    }
/**
     * Returns Subject of the campaign.
     * @return {String}
     */
    getSubject() {
        return this.subject;
    }

    /**
     * Sets Subject of the campaign.
     * @param {String} subject Subject of the campaign.
     */
    setSubject(subject) {
        this['subject'] = subject;
    }
/**
     * Returns The time the campaign was sent.
     * @return {Date}
     */
    getSentTime() {
        return this.sentTime;
    }

    /**
     * Sets The time the campaign was sent.
     * @param {Date} sentTime The time the campaign was sent.
     */
    setSentTime(sentTime) {
        this['sentTime'] = sentTime;
    }
/**
     * Returns URL to a screenshot of the campaign.
     * @return {String}
     */
    getCampaignScreenshotUrl() {
        return this.campaignScreenshotUrl;
    }

    /**
     * Sets URL to a screenshot of the campaign.
     * @param {String} campaignScreenshotUrl URL to a screenshot of the campaign.
     */
    setCampaignScreenshotUrl(campaignScreenshotUrl) {
        this['campaignScreenshotUrl'] = campaignScreenshotUrl;
    }

}



/**
 * Unique identifier for the campaign.
 * @member {Number} id
 */
CampaignDashboardData.prototype['id'] = undefined;

/**
 * Name of the campaign.
 * @member {String} name
 */
CampaignDashboardData.prototype['name'] = undefined;

/**
 * Subject of the campaign.
 * @member {String} subject
 */
CampaignDashboardData.prototype['subject'] = undefined;

/**
 * The time the campaign was sent.
 * @member {Date} sentTime
 */
CampaignDashboardData.prototype['sentTime'] = undefined;

/**
 * URL to a screenshot of the campaign.
 * @member {String} campaignScreenshotUrl
 */
CampaignDashboardData.prototype['campaignScreenshotUrl'] = undefined;






export default CampaignDashboardData;

