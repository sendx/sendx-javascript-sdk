/**
 * SendX REST API
 * # Introduction The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Contact model module.
 * @module sendx/model/Contact
 * @version 1.0.0
 */
class Contact {
    /**
     * Constructs a new <code>Contact</code>.
     * @alias module:sendx/model/Contact
     */
    constructor() { 
        
        Contact.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Contact</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sendx/model/Contact} obj Optional instance to populate.
     * @return {module:sendx/model/Contact} The populated <code>Contact</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Contact();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = ApiClient.convertToType(data['company'], 'String');
            }
            if (data.hasOwnProperty('customFields')) {
                obj['customFields'] = ApiClient.convertToType(data['customFields'], {'String': 'String'});
            }
            if (data.hasOwnProperty('unsubscribed')) {
                obj['unsubscribed'] = ApiClient.convertToType(data['unsubscribed'], 'Boolean');
            }
            if (data.hasOwnProperty('bounced')) {
                obj['bounced'] = ApiClient.convertToType(data['bounced'], 'Boolean');
            }
            if (data.hasOwnProperty('spam')) {
                obj['spam'] = ApiClient.convertToType(data['spam'], 'Boolean');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Date');
            }
            if (data.hasOwnProperty('blocked')) {
                obj['blocked'] = ApiClient.convertToType(data['blocked'], 'Boolean');
            }
            if (data.hasOwnProperty('dropped')) {
                obj['dropped'] = ApiClient.convertToType(data['dropped'], 'Boolean');
            }
            if (data.hasOwnProperty('LTV')) {
                obj['LTV'] = ApiClient.convertToType(data['LTV'], 'Number');
            }
            if (data.hasOwnProperty('contactSource')) {
                obj['contactSource'] = ApiClient.convertToType(data['contactSource'], 'Number');
            }
            if (data.hasOwnProperty('lastTrackedIp')) {
                obj['lastTrackedIp'] = ApiClient.convertToType(data['lastTrackedIp'], 'String');
            }
            if (data.hasOwnProperty('lists')) {
                obj['lists'] = ApiClient.convertToType(data['lists'], ['String']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Contact</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Contact</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['company'] && !(typeof data['company'] === 'string' || data['company'] instanceof String)) {
            throw new Error("Expected the field `company` to be a primitive type in the JSON string but got " + data['company']);
        }
        // ensure the json data is a string
        if (data['lastTrackedIp'] && !(typeof data['lastTrackedIp'] === 'string' || data['lastTrackedIp'] instanceof String)) {
            throw new Error("Expected the field `lastTrackedIp` to be a primitive type in the JSON string but got " + data['lastTrackedIp']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['lists'])) {
            throw new Error("Expected the field `lists` to be an array in the JSON data but got " + data['lists']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }

/**
     * Returns Identifier for the contact.
     * @return {String}
     */
    getId() {
        return this.id;
    }

    /**
     * Sets Identifier for the contact.
     * @param {String} id Identifier for the contact.
     */
    setId(id) {
        this['id'] = id;
    }
/**
     * Returns The first name of the contact.
     * @return {String}
     */
    getFirstName() {
        return this.firstName;
    }

    /**
     * Sets The first name of the contact.
     * @param {String} firstName The first name of the contact.
     */
    setFirstName(firstName) {
        this['firstName'] = firstName;
    }
/**
     * Returns The last name of the contact.
     * @return {String}
     */
    getLastName() {
        return this.lastName;
    }

    /**
     * Sets The last name of the contact.
     * @param {String} lastName The last name of the contact.
     */
    setLastName(lastName) {
        this['lastName'] = lastName;
    }
/**
     * Returns The email address of the contact.
     * @return {String}
     */
    getEmail() {
        return this.email;
    }

    /**
     * Sets The email address of the contact.
     * @param {String} email The email address of the contact.
     */
    setEmail(email) {
        this['email'] = email;
    }
/**
     * Returns The company of the contact.
     * @return {String}
     */
    getCompany() {
        return this.company;
    }

    /**
     * Sets The company of the contact.
     * @param {String} company The company of the contact.
     */
    setCompany(company) {
        this['company'] = company;
    }
/**
     * Returns Custom fields and their values
     * @return {Object.<String, String>}
     */
    getCustomFields() {
        return this.customFields;
    }

    /**
     * Sets Custom fields and their values
     * @param {Object.<String, String>} customFields Custom fields and their values
     */
    setCustomFields(customFields) {
        this['customFields'] = customFields;
    }
/**
     * Returns Indicates if the contact has unsubscribed from emails.
     * @return {Boolean}
     */
    getUnsubscribed() {
        return this.unsubscribed;
    }

    /**
     * Sets Indicates if the contact has unsubscribed from emails.
     * @param {Boolean} unsubscribed Indicates if the contact has unsubscribed from emails.
     */
    setUnsubscribed(unsubscribed) {
        this['unsubscribed'] = unsubscribed;
    }
/**
     * Returns Indicates if the contact's email has bounced.
     * @return {Boolean}
     */
    getBounced() {
        return this.bounced;
    }

    /**
     * Sets Indicates if the contact's email has bounced.
     * @param {Boolean} bounced Indicates if the contact's email has bounced.
     */
    setBounced(bounced) {
        this['bounced'] = bounced;
    }
/**
     * Returns Indicates if the contact marked the email as spam.
     * @return {Boolean}
     */
    getSpam() {
        return this.spam;
    }

    /**
     * Sets Indicates if the contact marked the email as spam.
     * @param {Boolean} spam Indicates if the contact marked the email as spam.
     */
    setSpam(spam) {
        this['spam'] = spam;
    }
/**
     * Returns The date and time when the contact was created.
     * @return {Date}
     */
    getCreated() {
        return this.created;
    }

    /**
     * Sets The date and time when the contact was created.
     * @param {Date} created The date and time when the contact was created.
     */
    setCreated(created) {
        this['created'] = created;
    }
/**
     * Returns The date and time when the contact was last updated.
     * @return {Date}
     */
    getUpdated() {
        return this.updated;
    }

    /**
     * Sets The date and time when the contact was last updated.
     * @param {Date} updated The date and time when the contact was last updated.
     */
    setUpdated(updated) {
        this['updated'] = updated;
    }
/**
     * Returns Indicates if the contact is blocked from receiving emails.
     * @return {Boolean}
     */
    getBlocked() {
        return this.blocked;
    }

    /**
     * Sets Indicates if the contact is blocked from receiving emails.
     * @param {Boolean} blocked Indicates if the contact is blocked from receiving emails.
     */
    setBlocked(blocked) {
        this['blocked'] = blocked;
    }
/**
     * Returns Indicates if emails to this contact were dropped.
     * @return {Boolean}
     */
    getDropped() {
        return this.dropped;
    }

    /**
     * Sets Indicates if emails to this contact were dropped.
     * @param {Boolean} dropped Indicates if emails to this contact were dropped.
     */
    setDropped(dropped) {
        this['dropped'] = dropped;
    }
/**
     * Returns Lifetime value (LTV) of the contact in currency units.
     * @return {Number}
     */
    getLTV() {
        return this.LTV;
    }

    /**
     * Sets Lifetime value (LTV) of the contact in currency units.
     * @param {Number} LTV Lifetime value (LTV) of the contact in currency units.
     */
    setLTV(LTV) {
        this['LTV'] = LTV;
    }
/**
     * Returns The source from which the contact was added. Possible values: 
     * @return {module:sendx/model/Contact.ContactSourceEnum}
     */
    getContactSource() {
        return this.contactSource;
    }

    /**
     * Sets The source from which the contact was added. Possible values: 
     * @param {module:sendx/model/Contact.ContactSourceEnum} contactSource The source from which the contact was added. Possible values: 
     */
    setContactSource(contactSource) {
        this['contactSource'] = contactSource;
    }
/**
     * Returns The last known IP address tracked for the contact.
     * @return {String}
     */
    getLastTrackedIp() {
        return this.lastTrackedIp;
    }

    /**
     * Sets The last known IP address tracked for the contact.
     * @param {String} lastTrackedIp The last known IP address tracked for the contact.
     */
    setLastTrackedIp(lastTrackedIp) {
        this['lastTrackedIp'] = lastTrackedIp;
    }
/**
     * Returns A list of `lists` ids the contact is subscribed to.
     * @return {Array.<String>}
     */
    getLists() {
        return this.lists;
    }

    /**
     * Sets A list of `lists` ids the contact is subscribed to.
     * @param {Array.<String>} lists A list of `lists` ids the contact is subscribed to.
     */
    setLists(lists) {
        this['lists'] = lists;
    }
/**
     * Returns `Tag` ids associated with the contact for segmentation or categorization.
     * @return {Array.<String>}
     */
    getTags() {
        return this.tags;
    }

    /**
     * Sets `Tag` ids associated with the contact for segmentation or categorization.
     * @param {Array.<String>} tags `Tag` ids associated with the contact for segmentation or categorization.
     */
    setTags(tags) {
        this['tags'] = tags;
    }

}



/**
 * Identifier for the contact.
 * @member {String} id
 */
Contact.prototype['id'] = undefined;

/**
 * The first name of the contact.
 * @member {String} firstName
 */
Contact.prototype['firstName'] = undefined;

/**
 * The last name of the contact.
 * @member {String} lastName
 */
Contact.prototype['lastName'] = undefined;

/**
 * The email address of the contact.
 * @member {String} email
 */
Contact.prototype['email'] = undefined;

/**
 * The company of the contact.
 * @member {String} company
 */
Contact.prototype['company'] = undefined;

/**
 * Custom fields and their values
 * @member {Object.<String, String>} customFields
 */
Contact.prototype['customFields'] = undefined;

/**
 * Indicates if the contact has unsubscribed from emails.
 * @member {Boolean} unsubscribed
 */
Contact.prototype['unsubscribed'] = undefined;

/**
 * Indicates if the contact's email has bounced.
 * @member {Boolean} bounced
 */
Contact.prototype['bounced'] = undefined;

/**
 * Indicates if the contact marked the email as spam.
 * @member {Boolean} spam
 */
Contact.prototype['spam'] = undefined;

/**
 * The date and time when the contact was created.
 * @member {Date} created
 */
Contact.prototype['created'] = undefined;

/**
 * The date and time when the contact was last updated.
 * @member {Date} updated
 */
Contact.prototype['updated'] = undefined;

/**
 * Indicates if the contact is blocked from receiving emails.
 * @member {Boolean} blocked
 */
Contact.prototype['blocked'] = undefined;

/**
 * Indicates if emails to this contact were dropped.
 * @member {Boolean} dropped
 */
Contact.prototype['dropped'] = undefined;

/**
 * Lifetime value (LTV) of the contact in currency units.
 * @member {Number} LTV
 */
Contact.prototype['LTV'] = undefined;

/**
 * The source from which the contact was added. Possible values: 
 * @member {module:sendx/model/Contact.ContactSourceEnum} contactSource
 */
Contact.prototype['contactSource'] = undefined;

/**
 * The last known IP address tracked for the contact.
 * @member {String} lastTrackedIp
 */
Contact.prototype['lastTrackedIp'] = undefined;

/**
 * A list of `lists` ids the contact is subscribed to.
 * @member {Array.<String>} lists
 */
Contact.prototype['lists'] = undefined;

/**
 * `Tag` ids associated with the contact for segmentation or categorization.
 * @member {Array.<String>} tags
 */
Contact.prototype['tags'] = undefined;





/**
 * Allowed values for the <code>contactSource</code> property.
 * @enum {Number}
 * @readonly
 */
Contact['ContactSourceEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2,

    /**
     * value: 3
     * @const
     */
    "3": 3,

    /**
     * value: 4
     * @const
     */
    "4": 4,

    /**
     * value: 5
     * @const
     */
    "5": 5,

    /**
     * value: 6
     * @const
     */
    "6": 6,

    /**
     * value: 7
     * @const
     */
    "7": 7,

    /**
     * value: 8
     * @const
     */
    "8": 8,

    /**
     * value: 9
     * @const
     */
    "9": 9,

    /**
     * value: 10
     * @const
     */
    "10": 10,

    /**
     * value: 11
     * @const
     */
    "11": 11,

    /**
     * value: 12
     * @const
     */
    "12": 12,

    /**
     * value: 13
     * @const
     */
    "13": 13,

    /**
     * value: 14
     * @const
     */
    "14": 14,

    /**
     * value: 15
     * @const
     */
    "15": 15,

    /**
     * value: 16
     * @const
     */
    "16": 16,

    /**
     * value: 17
     * @const
     */
    "17": 17,

    /**
     * value: 18
     * @const
     */
    "18": 18,

    /**
     * value: 19
     * @const
     */
    "19": 19
};



export default Contact;

