/**
 * SendX REST API
 * # Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContactRequest model module.
 * @module sendx/model/ContactRequest
 * @version 1.0.0
 */
class ContactRequest {
    /**
     * Constructs a new <code>ContactRequest</code>.
     * Schema for the contact request payload. Used for creating or updating a contact.
     * @alias module:sendx/model/ContactRequest
     */
    constructor() { 
        
        ContactRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContactRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sendx/model/ContactRequest} obj Optional instance to populate.
     * @return {module:sendx/model/ContactRequest} The populated <code>ContactRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContactRequest();

            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = ApiClient.convertToType(data['company'], 'String');
            }
            if (data.hasOwnProperty('lastTrackedIp')) {
                obj['lastTrackedIp'] = ApiClient.convertToType(data['lastTrackedIp'], 'String');
            }
            if (data.hasOwnProperty('customFields')) {
                obj['customFields'] = ApiClient.convertToType(data['customFields'], {'String': 'String'});
            }
            if (data.hasOwnProperty('lists')) {
                obj['lists'] = ApiClient.convertToType(data['lists'], ['String']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContactRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContactRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['company'] && !(typeof data['company'] === 'string' || data['company'] instanceof String)) {
            throw new Error("Expected the field `company` to be a primitive type in the JSON string but got " + data['company']);
        }
        // ensure the json data is a string
        if (data['lastTrackedIp'] && !(typeof data['lastTrackedIp'] === 'string' || data['lastTrackedIp'] instanceof String)) {
            throw new Error("Expected the field `lastTrackedIp` to be a primitive type in the JSON string but got " + data['lastTrackedIp']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['lists'])) {
            throw new Error("Expected the field `lists` to be an array in the JSON data but got " + data['lists']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }

/**
     * Returns The email address of the contact. Must be a valid email.
     * @return {String}
     */
    getEmail() {
        return this.email;
    }

    /**
     * Sets The email address of the contact. Must be a valid email.
     * @param {String} email The email address of the contact. Must be a valid email.
     */
    setEmail(email) {
        this['email'] = email;
    }
/**
     * Returns The first name of the contact.
     * @return {String}
     */
    getFirstName() {
        return this.firstName;
    }

    /**
     * Sets The first name of the contact.
     * @param {String} firstName The first name of the contact.
     */
    setFirstName(firstName) {
        this['firstName'] = firstName;
    }
/**
     * Returns The last name of the contact.
     * @return {String}
     */
    getLastName() {
        return this.lastName;
    }

    /**
     * Sets The last name of the contact.
     * @param {String} lastName The last name of the contact.
     */
    setLastName(lastName) {
        this['lastName'] = lastName;
    }
/**
     * Returns The company where the contact works.
     * @return {String}
     */
    getCompany() {
        return this.company;
    }

    /**
     * Sets The company where the contact works.
     * @param {String} company The company where the contact works.
     */
    setCompany(company) {
        this['company'] = company;
    }
/**
     * Returns The last known IP address of the contact.
     * @return {String}
     */
    getLastTrackedIp() {
        return this.lastTrackedIp;
    }

    /**
     * Sets The last known IP address of the contact.
     * @param {String} lastTrackedIp The last known IP address of the contact.
     */
    setLastTrackedIp(lastTrackedIp) {
        this['lastTrackedIp'] = lastTrackedIp;
    }
/**
     * Returns Custom fields specific to the contact, which may vary by account.
     * @return {Object.<String, String>}
     */
    getCustomFields() {
        return this.customFields;
    }

    /**
     * Sets Custom fields specific to the contact, which may vary by account.
     * @param {Object.<String, String>} customFields Custom fields specific to the contact, which may vary by account.
     */
    setCustomFields(customFields) {
        this['customFields'] = customFields;
    }
/**
     * Returns A list of `lists` ids the contact is subscribed to.
     * @return {Array.<String>}
     */
    getLists() {
        return this.lists;
    }

    /**
     * Sets A list of `lists` ids the contact is subscribed to.
     * @param {Array.<String>} lists A list of `lists` ids the contact is subscribed to.
     */
    setLists(lists) {
        this['lists'] = lists;
    }
/**
     * Returns Tag ids associated with the contact for segmentation or categorization.
     * @return {Array.<String>}
     */
    getTags() {
        return this.tags;
    }

    /**
     * Sets Tag ids associated with the contact for segmentation or categorization.
     * @param {Array.<String>} tags Tag ids associated with the contact for segmentation or categorization.
     */
    setTags(tags) {
        this['tags'] = tags;
    }

}



/**
 * The email address of the contact. Must be a valid email.
 * @member {String} email
 */
ContactRequest.prototype['email'] = undefined;

/**
 * The first name of the contact.
 * @member {String} firstName
 */
ContactRequest.prototype['firstName'] = undefined;

/**
 * The last name of the contact.
 * @member {String} lastName
 */
ContactRequest.prototype['lastName'] = undefined;

/**
 * The company where the contact works.
 * @member {String} company
 */
ContactRequest.prototype['company'] = undefined;

/**
 * The last known IP address of the contact.
 * @member {String} lastTrackedIp
 */
ContactRequest.prototype['lastTrackedIp'] = undefined;

/**
 * Custom fields specific to the contact, which may vary by account.
 * @member {Object.<String, String>} customFields
 */
ContactRequest.prototype['customFields'] = undefined;

/**
 * A list of `lists` ids the contact is subscribed to.
 * @member {Array.<String>} lists
 */
ContactRequest.prototype['lists'] = undefined;

/**
 * Tag ids associated with the contact for segmentation or categorization.
 * @member {Array.<String>} tags
 */
ContactRequest.prototype['tags'] = undefined;






export default ContactRequest;

