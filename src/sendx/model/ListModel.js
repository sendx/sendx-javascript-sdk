/**
 * SendX REST API
 * # Introduction The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ListModel model module.
 * @module sendx/model/ListModel
 * @version 1.0.0
 */
class ListModel {
    /**
     * Constructs a new <code>ListModel</code>.
     * @alias module:sendx/model/ListModel
     */
    constructor() { 
        
        ListModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ListModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sendx/model/ListModel} obj Optional instance to populate.
     * @return {module:sendx/model/ListModel} The populated <code>ListModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListModel();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'Number');
            }
            if (data.hasOwnProperty('sendThankYouMail')) {
                obj['sendThankYouMail'] = ApiClient.convertToType(data['sendThankYouMail'], 'Boolean');
            }
            if (data.hasOwnProperty('thankYouFromName')) {
                obj['thankYouFromName'] = ApiClient.convertToType(data['thankYouFromName'], 'String');
            }
            if (data.hasOwnProperty('thankYouFromEmail')) {
                obj['thankYouFromEmail'] = ApiClient.convertToType(data['thankYouFromEmail'], 'String');
            }
            if (data.hasOwnProperty('thankYouMailSubject')) {
                obj['thankYouMailSubject'] = ApiClient.convertToType(data['thankYouMailSubject'], 'String');
            }
            if (data.hasOwnProperty('thankYouMailMessage')) {
                obj['thankYouMailMessage'] = ApiClient.convertToType(data['thankYouMailMessage'], 'String');
            }
            if (data.hasOwnProperty('thankYouSender')) {
                obj['thankYouSender'] = ApiClient.convertToType(data['thankYouSender'], 'String');
            }
            if (data.hasOwnProperty('confirmFromName')) {
                obj['confirmFromName'] = ApiClient.convertToType(data['confirmFromName'], 'String');
            }
            if (data.hasOwnProperty('confirmFromEmail')) {
                obj['confirmFromEmail'] = ApiClient.convertToType(data['confirmFromEmail'], 'String');
            }
            if (data.hasOwnProperty('confirmMailSubject')) {
                obj['confirmMailSubject'] = ApiClient.convertToType(data['confirmMailSubject'], 'String');
            }
            if (data.hasOwnProperty('confirmMailMessage')) {
                obj['confirmMailMessage'] = ApiClient.convertToType(data['confirmMailMessage'], 'String');
            }
            if (data.hasOwnProperty('confirmSuccessPage')) {
                obj['confirmSuccessPage'] = ApiClient.convertToType(data['confirmSuccessPage'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Date');
            }
            if (data.hasOwnProperty('confirmSender')) {
                obj['confirmSender'] = ApiClient.convertToType(data['confirmSender'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['thankYouFromName'] && !(typeof data['thankYouFromName'] === 'string' || data['thankYouFromName'] instanceof String)) {
            throw new Error("Expected the field `thankYouFromName` to be a primitive type in the JSON string but got " + data['thankYouFromName']);
        }
        // ensure the json data is a string
        if (data['thankYouFromEmail'] && !(typeof data['thankYouFromEmail'] === 'string' || data['thankYouFromEmail'] instanceof String)) {
            throw new Error("Expected the field `thankYouFromEmail` to be a primitive type in the JSON string but got " + data['thankYouFromEmail']);
        }
        // ensure the json data is a string
        if (data['thankYouMailSubject'] && !(typeof data['thankYouMailSubject'] === 'string' || data['thankYouMailSubject'] instanceof String)) {
            throw new Error("Expected the field `thankYouMailSubject` to be a primitive type in the JSON string but got " + data['thankYouMailSubject']);
        }
        // ensure the json data is a string
        if (data['thankYouMailMessage'] && !(typeof data['thankYouMailMessage'] === 'string' || data['thankYouMailMessage'] instanceof String)) {
            throw new Error("Expected the field `thankYouMailMessage` to be a primitive type in the JSON string but got " + data['thankYouMailMessage']);
        }
        // ensure the json data is a string
        if (data['thankYouSender'] && !(typeof data['thankYouSender'] === 'string' || data['thankYouSender'] instanceof String)) {
            throw new Error("Expected the field `thankYouSender` to be a primitive type in the JSON string but got " + data['thankYouSender']);
        }
        // ensure the json data is a string
        if (data['confirmFromName'] && !(typeof data['confirmFromName'] === 'string' || data['confirmFromName'] instanceof String)) {
            throw new Error("Expected the field `confirmFromName` to be a primitive type in the JSON string but got " + data['confirmFromName']);
        }
        // ensure the json data is a string
        if (data['confirmFromEmail'] && !(typeof data['confirmFromEmail'] === 'string' || data['confirmFromEmail'] instanceof String)) {
            throw new Error("Expected the field `confirmFromEmail` to be a primitive type in the JSON string but got " + data['confirmFromEmail']);
        }
        // ensure the json data is a string
        if (data['confirmMailSubject'] && !(typeof data['confirmMailSubject'] === 'string' || data['confirmMailSubject'] instanceof String)) {
            throw new Error("Expected the field `confirmMailSubject` to be a primitive type in the JSON string but got " + data['confirmMailSubject']);
        }
        // ensure the json data is a string
        if (data['confirmMailMessage'] && !(typeof data['confirmMailMessage'] === 'string' || data['confirmMailMessage'] instanceof String)) {
            throw new Error("Expected the field `confirmMailMessage` to be a primitive type in the JSON string but got " + data['confirmMailMessage']);
        }
        // ensure the json data is a string
        if (data['confirmSuccessPage'] && !(typeof data['confirmSuccessPage'] === 'string' || data['confirmSuccessPage'] instanceof String)) {
            throw new Error("Expected the field `confirmSuccessPage` to be a primitive type in the JSON string but got " + data['confirmSuccessPage']);
        }
        // ensure the json data is a string
        if (data['confirmSender'] && !(typeof data['confirmSender'] === 'string' || data['confirmSender'] instanceof String)) {
            throw new Error("Expected the field `confirmSender` to be a primitive type in the JSON string but got " + data['confirmSender']);
        }

        return true;
    }

/**
     * Returns Encrypted ID of the list
     * @return {String}
     */
    getId() {
        return this.id;
    }

    /**
     * Sets Encrypted ID of the list
     * @param {String} id Encrypted ID of the list
     */
    setId(id) {
        this['id'] = id;
    }
/**
     * Returns Name of the list
     * @return {String}
     */
    getName() {
        return this.name;
    }

    /**
     * Sets Name of the list
     * @param {String} name Name of the list
     */
    setName(name) {
        this['name'] = name;
    }
/**
     * Returns Type of the list representing opt-in methods (1: Single Opt-In, 2: Double Opt-In)
     * @return {module:sendx/model/ListModel.TypeEnum}
     */
    getType() {
        return this.type;
    }

    /**
     * Sets Type of the list representing opt-in methods (1: Single Opt-In, 2: Double Opt-In)
     * @param {module:sendx/model/ListModel.TypeEnum} type Type of the list representing opt-in methods (1: Single Opt-In, 2: Double Opt-In)
     */
    setType(type) {
        this['type'] = type;
    }
/**
     * Returns Indicates if a thank-you email should be sent
     * @return {Boolean}
     */
    getSendThankYouMail() {
        return this.sendThankYouMail;
    }

    /**
     * Sets Indicates if a thank-you email should be sent
     * @param {Boolean} sendThankYouMail Indicates if a thank-you email should be sent
     */
    setSendThankYouMail(sendThankYouMail) {
        this['sendThankYouMail'] = sendThankYouMail;
    }
/**
     * Returns Name displayed as the sender in the thank-you email
     * @return {String}
     */
    getThankYouFromName() {
        return this.thankYouFromName;
    }

    /**
     * Sets Name displayed as the sender in the thank-you email
     * @param {String} thankYouFromName Name displayed as the sender in the thank-you email
     */
    setThankYouFromName(thankYouFromName) {
        this['thankYouFromName'] = thankYouFromName;
    }
/**
     * Returns Email address from which the thank-you email is sent
     * @return {String}
     */
    getThankYouFromEmail() {
        return this.thankYouFromEmail;
    }

    /**
     * Sets Email address from which the thank-you email is sent
     * @param {String} thankYouFromEmail Email address from which the thank-you email is sent
     */
    setThankYouFromEmail(thankYouFromEmail) {
        this['thankYouFromEmail'] = thankYouFromEmail;
    }
/**
     * Returns Subject line of the thank-you email
     * @return {String}
     */
    getThankYouMailSubject() {
        return this.thankYouMailSubject;
    }

    /**
     * Sets Subject line of the thank-you email
     * @param {String} thankYouMailSubject Subject line of the thank-you email
     */
    setThankYouMailSubject(thankYouMailSubject) {
        this['thankYouMailSubject'] = thankYouMailSubject;
    }
/**
     * Returns Plain text message body of the thank-you email
     * @return {String}
     */
    getThankYouMailMessage() {
        return this.thankYouMailMessage;
    }

    /**
     * Sets Plain text message body of the thank-you email
     * @param {String} thankYouMailMessage Plain text message body of the thank-you email
     */
    setThankYouMailMessage(thankYouMailMessage) {
        this['thankYouMailMessage'] = thankYouMailMessage;
    }
/**
     * Returns Details of the sender of the thank-you email
     * @return {String}
     */
    getThankYouSender() {
        return this.thankYouSender;
    }

    /**
     * Sets Details of the sender of the thank-you email
     * @param {String} thankYouSender Details of the sender of the thank-you email
     */
    setThankYouSender(thankYouSender) {
        this['thankYouSender'] = thankYouSender;
    }
/**
     * Returns Name displayed as the sender in the confirmation email
     * @return {String}
     */
    getConfirmFromName() {
        return this.confirmFromName;
    }

    /**
     * Sets Name displayed as the sender in the confirmation email
     * @param {String} confirmFromName Name displayed as the sender in the confirmation email
     */
    setConfirmFromName(confirmFromName) {
        this['confirmFromName'] = confirmFromName;
    }
/**
     * Returns Email address from which the confirmation email is sent
     * @return {String}
     */
    getConfirmFromEmail() {
        return this.confirmFromEmail;
    }

    /**
     * Sets Email address from which the confirmation email is sent
     * @param {String} confirmFromEmail Email address from which the confirmation email is sent
     */
    setConfirmFromEmail(confirmFromEmail) {
        this['confirmFromEmail'] = confirmFromEmail;
    }
/**
     * Returns Subject line of the confirmation email
     * @return {String}
     */
    getConfirmMailSubject() {
        return this.confirmMailSubject;
    }

    /**
     * Sets Subject line of the confirmation email
     * @param {String} confirmMailSubject Subject line of the confirmation email
     */
    setConfirmMailSubject(confirmMailSubject) {
        this['confirmMailSubject'] = confirmMailSubject;
    }
/**
     * Returns Plain text message body of the confirmation email
     * @return {String}
     */
    getConfirmMailMessage() {
        return this.confirmMailMessage;
    }

    /**
     * Sets Plain text message body of the confirmation email
     * @param {String} confirmMailMessage Plain text message body of the confirmation email
     */
    setConfirmMailMessage(confirmMailMessage) {
        this['confirmMailMessage'] = confirmMailMessage;
    }
/**
     * Returns URL of the success page after confirmation
     * @return {String}
     */
    getConfirmSuccessPage() {
        return this.confirmSuccessPage;
    }

    /**
     * Sets URL of the success page after confirmation
     * @param {String} confirmSuccessPage URL of the success page after confirmation
     */
    setConfirmSuccessPage(confirmSuccessPage) {
        this['confirmSuccessPage'] = confirmSuccessPage;
    }
/**
     * Returns Date and time when the list was created
     * @return {Date}
     */
    getCreated() {
        return this.created;
    }

    /**
     * Sets Date and time when the list was created
     * @param {Date} created Date and time when the list was created
     */
    setCreated(created) {
        this['created'] = created;
    }
/**
     * Returns Date and time when the list was last updated
     * @return {Date}
     */
    getUpdated() {
        return this.updated;
    }

    /**
     * Sets Date and time when the list was last updated
     * @param {Date} updated Date and time when the list was last updated
     */
    setUpdated(updated) {
        this['updated'] = updated;
    }
/**
     * Returns Details of the sender of the confirmation email
     * @return {String}
     */
    getConfirmSender() {
        return this.confirmSender;
    }

    /**
     * Sets Details of the sender of the confirmation email
     * @param {String} confirmSender Details of the sender of the confirmation email
     */
    setConfirmSender(confirmSender) {
        this['confirmSender'] = confirmSender;
    }

}



/**
 * Encrypted ID of the list
 * @member {String} id
 */
ListModel.prototype['id'] = undefined;

/**
 * Name of the list
 * @member {String} name
 */
ListModel.prototype['name'] = undefined;

/**
 * Type of the list representing opt-in methods (1: Single Opt-In, 2: Double Opt-In)
 * @member {module:sendx/model/ListModel.TypeEnum} type
 */
ListModel.prototype['type'] = undefined;

/**
 * Indicates if a thank-you email should be sent
 * @member {Boolean} sendThankYouMail
 */
ListModel.prototype['sendThankYouMail'] = undefined;

/**
 * Name displayed as the sender in the thank-you email
 * @member {String} thankYouFromName
 */
ListModel.prototype['thankYouFromName'] = undefined;

/**
 * Email address from which the thank-you email is sent
 * @member {String} thankYouFromEmail
 */
ListModel.prototype['thankYouFromEmail'] = undefined;

/**
 * Subject line of the thank-you email
 * @member {String} thankYouMailSubject
 */
ListModel.prototype['thankYouMailSubject'] = undefined;

/**
 * Plain text message body of the thank-you email
 * @member {String} thankYouMailMessage
 */
ListModel.prototype['thankYouMailMessage'] = undefined;

/**
 * Details of the sender of the thank-you email
 * @member {String} thankYouSender
 */
ListModel.prototype['thankYouSender'] = undefined;

/**
 * Name displayed as the sender in the confirmation email
 * @member {String} confirmFromName
 */
ListModel.prototype['confirmFromName'] = undefined;

/**
 * Email address from which the confirmation email is sent
 * @member {String} confirmFromEmail
 */
ListModel.prototype['confirmFromEmail'] = undefined;

/**
 * Subject line of the confirmation email
 * @member {String} confirmMailSubject
 */
ListModel.prototype['confirmMailSubject'] = undefined;

/**
 * Plain text message body of the confirmation email
 * @member {String} confirmMailMessage
 */
ListModel.prototype['confirmMailMessage'] = undefined;

/**
 * URL of the success page after confirmation
 * @member {String} confirmSuccessPage
 */
ListModel.prototype['confirmSuccessPage'] = undefined;

/**
 * Date and time when the list was created
 * @member {Date} created
 */
ListModel.prototype['created'] = undefined;

/**
 * Date and time when the list was last updated
 * @member {Date} updated
 */
ListModel.prototype['updated'] = undefined;

/**
 * Details of the sender of the confirmation email
 * @member {String} confirmSender
 */
ListModel.prototype['confirmSender'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {Number}
 * @readonly
 */
ListModel['TypeEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1
     * @const
     */
    "1": 1
};



export default ListModel;

