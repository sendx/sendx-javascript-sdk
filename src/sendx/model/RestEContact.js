/**
 * SendX REST API
 * # SendX REST API Documentation  ## üöÄ Introduction  The SendX API is organized around REST principles. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  **Key Features:** - üîí **Security**: Team-based authentication with optional member-level access - üéØ **Resource-Oriented**: RESTful design with clear resource boundaries - üìä **Rich Data Models**: Three-layer model system (Input/Output/Internal) - üîó **Relationships**: Automatic prefix handling for resource relationships - üìà **Scalable**: Built for high-volume email marketing operations  ## üèóÔ∏è Architecture Overview  SendX uses a three-layer model architecture:  1. **Input Models** (`RestE*`): For API requests 2. **Output Models** (`RestR*`): For API responses with prefixed IDs 3. **Internal Models**: Core business logic (not exposed in API)  ## üîê Security & Authentication  SendX uses API key authentication:  ### Team API Key ```http X-Team-ApiKey: YOUR_TEAM_API_KEY ``` - **Required for all requests** - Team-level access to resources - Available in SendX Settings ‚Üí Team API Key  ## üÜî Encrypted ID System  SendX uses encrypted IDs for security and better developer experience:  - **Internal IDs**: Sequential integers (not exposed) - **Encrypted IDs**: 22-character alphanumeric strings - **Prefixed IDs**: Resource-type prefixes in API responses (`contact_<22-char-id>`)  ### ID Format  **All resource IDs follow this pattern:** ``` <resource_prefix>_<22_character_alphanumeric_string> ```  **Example:** ```json {   \"id\": \"contact_BnKjkbBBS500CoBCP0oChQ\",   \"lists\": [\"list_OcuxJHdiAvujmwQVJfd3ss\", \"list_0tOFLp5RgV7s3LNiHrjGYs\"],   \"tags\": [\"tag_UhsDkjL772Qbj5lWtT62VK\", \"tag_fL7t9lsnZ9swvx2HrtQ9wM\"] } ```  ## üìö Resource Prefixes  | Resource | Prefix | Example | |----------|--------|---------| | Contact | `contact_` | `contact_BnKjkbBBS500CoBCP0oChQ` | | Campaign | `campaign_` | `campaign_LUE9BTxmksSmqHWbh96zsn` | | List | `list_` | `list_OcuxJHdiAvujmwQVJfd3ss` | | Tag | `tag_` | `tag_UhsDkjL772Qbj5lWtT62VK` | | Sender | `sender_` | `sender_4vK3WFhMgvOwUNyaL4QxCD` | | Template | `template_` | `template_f3lJvTEhSjKGVb5Lwc5SWS` | | Custom Field | `field_` | `field_MnuqBAG2NPLm7PZMWbjQxt` | | Webhook | `webhook_` | `webhook_9l154iiXlZoPo7vngmamee` | | Post | `post_` | `post_XyZ123aBc456DeF789GhI` | | Post Category | `post_category_` | `post_category_YzS1wOU20yw87UUHKxMzwn` | | Post Tag | `post_tag_` | `post_tag_123XyZ456AbC` | | Member | `member_` | `member_JkL012MnO345PqR678` |  ## üéØ Best Practices  ### Error Handling - **Always check status codes**: 2xx = success, 4xx = client error, 5xx = server error - **Read error messages**: Descriptive messages help debug issues - **Handle rate limits**: Respect API rate limits for optimal performance  ### Data Validation - **Email format**: Must be valid email addresses - **Required fields**: Check documentation for mandatory fields - **Field lengths**: Respect maximum length constraints  ### Performance - **Pagination**: Use offset/limit for large datasets - **Batch operations**: Process multiple items when supported - **Caching**: Cache responses when appropriate  ## üõ†Ô∏è SDKs & Integration  Official SDKs available for: - [Golang](https://github.com/sendx/sendx-go-sdk) - [Python](https://github.com/sendx/sendx-python-sdk) - [Ruby](https://github.com/sendx/sendx-ruby-sdk) - [Java](https://github.com/sendx/sendx-java-sdk) - [PHP](https://github.com/sendx/sendx-php-sdk) - [JavaScript](https://github.com/sendx/sendx-javascript-sdk)  ## üìû Support  Need help? Contact us: - üí¨ **Website Chat**: Available on sendx.io - üìß **Email**: hello@sendx.io - üìö **Documentation**: Full guides at help.sendx.io  ---  **API Endpoint:** `https://api.sendx.io/api/v1/rest`  [<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\">](https://god.gw.postman.com/run-collection/33476323-44b198b0-5219-4619-a01f-cfc24d573885?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D33476323-44b198b0-5219-4619-a01f-cfc24d573885%26entityType%3Dcollection%26workspaceId%3D6b1e4f65-96a9-4136-9512-6266c852517e) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RestEContact model module.
 * @module sendx/model/RestEContact
 * @version 1.0.0
 */
class RestEContact {
    /**
     * Constructs a new <code>RestEContact</code>.
     * @alias module:sendx/model/RestEContact
     * @param email {String} Email address of the contact (required and must be unique within team).  **Validation:** - Must be a valid email format - Must be unique within the team - Cannot be empty or null 
     */
    constructor(email) { 
        
        RestEContact.initialize(this, email);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, email) { 
        obj['email'] = email;
    }

    /**
     * Constructs a <code>RestEContact</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sendx/model/RestEContact} obj Optional instance to populate.
     * @return {module:sendx/model/RestEContact} The populated <code>RestEContact</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RestEContact();

            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = ApiClient.convertToType(data['company'], 'String');
            }
            if (data.hasOwnProperty('customFields')) {
                obj['customFields'] = ApiClient.convertToType(data['customFields'], {'String': 'String'});
            }
            if (data.hasOwnProperty('lists')) {
                obj['lists'] = ApiClient.convertToType(data['lists'], ['String']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('lastTrackedIp')) {
                obj['lastTrackedIp'] = ApiClient.convertToType(data['lastTrackedIp'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RestEContact</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RestEContact</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RestEContact.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['company'] && !(typeof data['company'] === 'string' || data['company'] instanceof String)) {
            throw new Error("Expected the field `company` to be a primitive type in the JSON string but got " + data['company']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['lists'])) {
            throw new Error("Expected the field `lists` to be an array in the JSON data but got " + data['lists']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['lastTrackedIp'] && !(typeof data['lastTrackedIp'] === 'string' || data['lastTrackedIp'] instanceof String)) {
            throw new Error("Expected the field `lastTrackedIp` to be a primitive type in the JSON string but got " + data['lastTrackedIp']);
        }

        return true;
    }

/**
     * Returns First name of the contact
     * @return {String}
     */
    getFirstName() {
        return this.firstName;
    }

    /**
     * Sets First name of the contact
     * @param {String} firstName First name of the contact
     */
    setFirstName(firstName) {
        this['firstName'] = firstName;
    }
/**
     * Returns Last name of the contact
     * @return {String}
     */
    getLastName() {
        return this.lastName;
    }

    /**
     * Sets Last name of the contact
     * @param {String} lastName Last name of the contact
     */
    setLastName(lastName) {
        this['lastName'] = lastName;
    }
/**
     * Returns Email address of the contact (required and must be unique within team).  **Validation:** - Must be a valid email format - Must be unique within the team - Cannot be empty or null 
     * @return {String}
     */
    getEmail() {
        return this.email;
    }

    /**
     * Sets Email address of the contact (required and must be unique within team).  **Validation:** - Must be a valid email format - Must be unique within the team - Cannot be empty or null 
     * @param {String} email Email address of the contact (required and must be unique within team).  **Validation:** - Must be a valid email format - Must be unique within the team - Cannot be empty or null 
     */
    setEmail(email) {
        this['email'] = email;
    }
/**
     * Returns Company name of the contact
     * @return {String}
     */
    getCompany() {
        return this.company;
    }

    /**
     * Sets Company name of the contact
     * @param {String} company Company name of the contact
     */
    setCompany(company) {
        this['company'] = company;
    }
/**
     * Returns Custom fields as key-value pairs. Keys should use `field_` prefix.  **Processing:** - Keys are case-sensitive - Values are stored as strings  **Examples:** - `\"field_MnuqBAG2NPLm7PZMWbjQxt\": \"Engineering\"` ‚Üí stored as `department: Engineering` 
     * @return {Object.<String, String>}
     */
    getCustomFields() {
        return this.customFields;
    }

    /**
     * Sets Custom fields as key-value pairs. Keys should use `field_` prefix.  **Processing:** - Keys are case-sensitive - Values are stored as strings  **Examples:** - `\"field_MnuqBAG2NPLm7PZMWbjQxt\": \"Engineering\"` ‚Üí stored as `department: Engineering` 
     * @param {Object.<String, String>} customFields Custom fields as key-value pairs. Keys should use `field_` prefix.  **Processing:** - Keys are case-sensitive - Values are stored as strings  **Examples:** - `\"field_MnuqBAG2NPLm7PZMWbjQxt\": \"Engineering\"` ‚Üí stored as `department: Engineering` 
     */
    setCustomFields(customFields) {
        this['customFields'] = customFields;
    }
/**
     * Returns Array of list identifiers to associate with the contact.  Identifiers should use `list_` prefix.  **Processing:** - Invalid list IDs will send our 400 error - Duplicates will be removed  **Examples:** - `\"list_OcuxJHdiAvujmwQVJfd3ss\"` ‚Üí valid prefixed format 
     * @return {Array.<String>}
     */
    getLists() {
        return this.lists;
    }

    /**
     * Sets Array of list identifiers to associate with the contact.  Identifiers should use `list_` prefix.  **Processing:** - Invalid list IDs will send our 400 error - Duplicates will be removed  **Examples:** - `\"list_OcuxJHdiAvujmwQVJfd3ss\"` ‚Üí valid prefixed format 
     * @param {Array.<String>} lists Array of list identifiers to associate with the contact.  Identifiers should use `list_` prefix.  **Processing:** - Invalid list IDs will send our 400 error - Duplicates will be removed  **Examples:** - `\"list_OcuxJHdiAvujmwQVJfd3ss\"` ‚Üí valid prefixed format 
     */
    setLists(lists) {
        this['lists'] = lists;
    }
/**
     * Returns Array of tag identifiers to associate with the contact. Identifiers should use `tag_` prefix.  **Processing:** - Invalid tag IDs will be ignored - Duplicates will be removed  **Examples:** - `\"tag_UhsDkjL772Qbj5lWtT62VK\"` ‚Üí valid prefixed format 
     * @return {Array.<String>}
     */
    getTags() {
        return this.tags;
    }

    /**
     * Sets Array of tag identifiers to associate with the contact. Identifiers should use `tag_` prefix.  **Processing:** - Invalid tag IDs will be ignored - Duplicates will be removed  **Examples:** - `\"tag_UhsDkjL772Qbj5lWtT62VK\"` ‚Üí valid prefixed format 
     * @param {Array.<String>} tags Array of tag identifiers to associate with the contact. Identifiers should use `tag_` prefix.  **Processing:** - Invalid tag IDs will be ignored - Duplicates will be removed  **Examples:** - `\"tag_UhsDkjL772Qbj5lWtT62VK\"` ‚Üí valid prefixed format 
     */
    setTags(tags) {
        this['tags'] = tags;
    }
/**
     * Returns Last tracked IP address of the contact for analytics purposes.  **Usage:** - Used for geographic analytics - Helps with spam detection - Optional field 
     * @return {String}
     */
    getLastTrackedIp() {
        return this.lastTrackedIp;
    }

    /**
     * Sets Last tracked IP address of the contact for analytics purposes.  **Usage:** - Used for geographic analytics - Helps with spam detection - Optional field 
     * @param {String} lastTrackedIp Last tracked IP address of the contact for analytics purposes.  **Usage:** - Used for geographic analytics - Helps with spam detection - Optional field 
     */
    setLastTrackedIp(lastTrackedIp) {
        this['lastTrackedIp'] = lastTrackedIp;
    }

}

RestEContact.RequiredProperties = ["email"];

/**
 * First name of the contact
 * @member {String} firstName
 */
RestEContact.prototype['firstName'] = undefined;

/**
 * Last name of the contact
 * @member {String} lastName
 */
RestEContact.prototype['lastName'] = undefined;

/**
 * Email address of the contact (required and must be unique within team).  **Validation:** - Must be a valid email format - Must be unique within the team - Cannot be empty or null 
 * @member {String} email
 */
RestEContact.prototype['email'] = undefined;

/**
 * Company name of the contact
 * @member {String} company
 */
RestEContact.prototype['company'] = undefined;

/**
 * Custom fields as key-value pairs. Keys should use `field_` prefix.  **Processing:** - Keys are case-sensitive - Values are stored as strings  **Examples:** - `\"field_MnuqBAG2NPLm7PZMWbjQxt\": \"Engineering\"` ‚Üí stored as `department: Engineering` 
 * @member {Object.<String, String>} customFields
 */
RestEContact.prototype['customFields'] = undefined;

/**
 * Array of list identifiers to associate with the contact.  Identifiers should use `list_` prefix.  **Processing:** - Invalid list IDs will send our 400 error - Duplicates will be removed  **Examples:** - `\"list_OcuxJHdiAvujmwQVJfd3ss\"` ‚Üí valid prefixed format 
 * @member {Array.<String>} lists
 */
RestEContact.prototype['lists'] = undefined;

/**
 * Array of tag identifiers to associate with the contact. Identifiers should use `tag_` prefix.  **Processing:** - Invalid tag IDs will be ignored - Duplicates will be removed  **Examples:** - `\"tag_UhsDkjL772Qbj5lWtT62VK\"` ‚Üí valid prefixed format 
 * @member {Array.<String>} tags
 */
RestEContact.prototype['tags'] = undefined;

/**
 * Last tracked IP address of the contact for analytics purposes.  **Usage:** - Used for geographic analytics - Helps with spam detection - Optional field 
 * @member {String} lastTrackedIp
 */
RestEContact.prototype['lastTrackedIp'] = undefined;






export default RestEContact;

