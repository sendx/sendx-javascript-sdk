/**
 * SendX REST API
 * # SendX REST API Documentation  ## üöÄ Introduction  The SendX API is organized around REST principles. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  **Key Features:** - üîí **Security**: Team-based authentication with optional member-level access - üéØ **Resource-Oriented**: RESTful design with clear resource boundaries - üìä **Rich Data Models**: Three-layer model system (Input/Output/Internal) - üîó **Relationships**: Automatic prefix handling for resource relationships - üìà **Scalable**: Built for high-volume email marketing operations  ## üèóÔ∏è Architecture Overview  SendX uses a three-layer model architecture:  1. **Input Models** (`RestE*`): For API requests 2. **Output Models** (`RestR*`): For API responses with prefixed IDs 3. **Internal Models**: Core business logic (not exposed in API)  ## üîê Security & Authentication  SendX uses API key authentication:  ### Team API Key ```http X-Team-ApiKey: YOUR_TEAM_API_KEY ``` - **Required for all requests** - Team-level access to resources - Available in SendX Settings ‚Üí Team API Key  ## üÜî Encrypted ID System  SendX uses encrypted IDs for security and better developer experience:  - **Internal IDs**: Sequential integers (not exposed) - **Encrypted IDs**: 22-character alphanumeric strings - **Prefixed IDs**: Resource-type prefixes in API responses (`contact_<22-char-id>`)  ### ID Format  **All resource IDs follow this pattern:** ``` <resource_prefix>_<22_character_alphanumeric_string> ```  **Example:** ```json {   \"id\": \"contact_BnKjkbBBS500CoBCP0oChQ\",   \"lists\": [\"list_OcuxJHdiAvujmwQVJfd3ss\", \"list_0tOFLp5RgV7s3LNiHrjGYs\"],   \"tags\": [\"tag_UhsDkjL772Qbj5lWtT62VK\", \"tag_fL7t9lsnZ9swvx2HrtQ9wM\"] } ```  ## üìö Resource Prefixes  | Resource | Prefix | Example | |----------|--------|---------| | Contact | `contact_` | `contact_BnKjkbBBS500CoBCP0oChQ` | | Campaign | `campaign_` | `campaign_LUE9BTxmksSmqHWbh96zsn` | | List | `list_` | `list_OcuxJHdiAvujmwQVJfd3ss` | | Tag | `tag_` | `tag_UhsDkjL772Qbj5lWtT62VK` | | Sender | `sender_` | `sender_4vK3WFhMgvOwUNyaL4QxCD` | | Template | `template_` | `template_f3lJvTEhSjKGVb5Lwc5SWS` | | Custom Field | `field_` | `field_MnuqBAG2NPLm7PZMWbjQxt` | | Webhook | `webhook_` | `webhook_9l154iiXlZoPo7vngmamee` | | Post | `post_` | `post_XyZ123aBc456DeF789GhI` | | Post Category | `post_category_` | `post_category_YzS1wOU20yw87UUHKxMzwn` | | Post Tag | `post_tag_` | `post_tag_123XyZ456AbC` | | Member | `member_` | `member_JkL012MnO345PqR678` |  ## üéØ Best Practices  ### Error Handling - **Always check status codes**: 2xx = success, 4xx = client error, 5xx = server error - **Read error messages**: Descriptive messages help debug issues - **Handle rate limits**: Respect API rate limits for optimal performance  ### Data Validation - **Email format**: Must be valid email addresses - **Required fields**: Check documentation for mandatory fields - **Field lengths**: Respect maximum length constraints  ### Performance - **Pagination**: Use offset/limit for large datasets - **Batch operations**: Process multiple items when supported - **Caching**: Cache responses when appropriate  ## üõ†Ô∏è SDKs & Integration  Official SDKs available for: - [Golang](https://github.com/sendx/sendx-go-sdk) - [Python](https://github.com/sendx/sendx-python-sdk) - [Ruby](https://github.com/sendx/sendx-ruby-sdk) - [Java](https://github.com/sendx/sendx-java-sdk) - [PHP](https://github.com/sendx/sendx-php-sdk) - [JavaScript](https://github.com/sendx/sendx-javascript-sdk)  ## üìû Support  Need help? Contact us: - üí¨ **Website Chat**: Available on sendx.io - üìß **Email**: hello@sendx.io - üìö **Documentation**: Full guides at help.sendx.io  ---  **API Endpoint:** `https://api.sendx.io/api/v1/rest`  [<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\">](https://god.gw.postman.com/run-collection/33476323-44b198b0-5219-4619-a01f-cfc24d573885?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D33476323-44b198b0-5219-4619-a01f-cfc24d573885%26entityType%3Dcollection%26workspaceId%3D6b1e4f65-96a9-4136-9512-6266c852517e) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RestRCampaign model module.
 * @module sendx/model/RestRCampaign
 * @version 1.0.0
 */
class RestRCampaign {
    /**
     * Constructs a new <code>RestRCampaign</code>.
     * @alias module:sendx/model/RestRCampaign
     * @param name {String} Internal campaign name
     * @param subject {String} Email subject line
     * @param sender {String} Sender id
     * @param scheduleTime {Date} When to send (if scheduled)
     * @param scheduleType {Number} Campaign scheduling type.  **Values:** - `0` - Schedule later - `1` - Send Now 
     * @param scheduleCondition {String} datetime for scheduled campaigns (required if scheduleType=1)
     * @param includedLists {Array.<String>} Included list IDs with prefix
     * @param excludedLists {Array.<String>} Excluded list IDs with prefix
     */
    constructor(name, subject, sender, scheduleTime, scheduleType, scheduleCondition, includedLists, excludedLists) { 
        
        RestRCampaign.initialize(this, name, subject, sender, scheduleTime, scheduleType, scheduleCondition, includedLists, excludedLists);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, subject, sender, scheduleTime, scheduleType, scheduleCondition, includedLists, excludedLists) { 
        obj['name'] = name;
        obj['subject'] = subject;
        obj['sender'] = sender;
        obj['scheduleTime'] = scheduleTime;
        obj['scheduleType'] = scheduleType || 0;
        obj['scheduleCondition'] = scheduleCondition;
        obj['includedLists'] = includedLists;
        obj['excludedLists'] = excludedLists;
    }

    /**
     * Constructs a <code>RestRCampaign</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sendx/model/RestRCampaign} obj Optional instance to populate.
     * @return {module:sendx/model/RestRCampaign} The populated <code>RestRCampaign</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RestRCampaign();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('preheader')) {
                obj['preheader'] = ApiClient.convertToType(data['preheader'], 'String');
            }
            if (data.hasOwnProperty('sender')) {
                obj['sender'] = ApiClient.convertToType(data['sender'], 'String');
            }
            if (data.hasOwnProperty('htmlContent')) {
                obj['htmlContent'] = ApiClient.convertToType(data['htmlContent'], 'String');
            }
            if (data.hasOwnProperty('textContent')) {
                obj['textContent'] = ApiClient.convertToType(data['textContent'], 'String');
            }
            if (data.hasOwnProperty('scheduleTime')) {
                obj['scheduleTime'] = ApiClient.convertToType(data['scheduleTime'], 'Date');
            }
            if (data.hasOwnProperty('scheduleType')) {
                obj['scheduleType'] = ApiClient.convertToType(data['scheduleType'], 'Number');
            }
            if (data.hasOwnProperty('scheduleCondition')) {
                obj['scheduleCondition'] = ApiClient.convertToType(data['scheduleCondition'], 'String');
            }
            if (data.hasOwnProperty('timeCondition')) {
                obj['timeCondition'] = ApiClient.convertToType(data['timeCondition'], 'String');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('smartSend')) {
                obj['smartSend'] = ApiClient.convertToType(data['smartSend'], 'Boolean');
            }
            if (data.hasOwnProperty('sendInContactsTimezone')) {
                obj['sendInContactsTimezone'] = ApiClient.convertToType(data['sendInContactsTimezone'], 'Boolean');
            }
            if (data.hasOwnProperty('preferredTimeCondition')) {
                obj['preferredTimeCondition'] = ApiClient.convertToType(data['preferredTimeCondition'], 'String');
            }
            if (data.hasOwnProperty('preferredTimezone')) {
                obj['preferredTimezone'] = ApiClient.convertToType(data['preferredTimezone'], 'String');
            }
            if (data.hasOwnProperty('strategy')) {
                obj['strategy'] = ApiClient.convertToType(data['strategy'], 'String');
            }
            if (data.hasOwnProperty('includedSegments')) {
                obj['includedSegments'] = ApiClient.convertToType(data['includedSegments'], ['String']);
            }
            if (data.hasOwnProperty('includedLists')) {
                obj['includedLists'] = ApiClient.convertToType(data['includedLists'], ['String']);
            }
            if (data.hasOwnProperty('includedTags')) {
                obj['includedTags'] = ApiClient.convertToType(data['includedTags'], ['String']);
            }
            if (data.hasOwnProperty('excludedSegments')) {
                obj['excludedSegments'] = ApiClient.convertToType(data['excludedSegments'], ['String']);
            }
            if (data.hasOwnProperty('excludedLists')) {
                obj['excludedLists'] = ApiClient.convertToType(data['excludedLists'], ['String']);
            }
            if (data.hasOwnProperty('excludedTags')) {
                obj['excludedTags'] = ApiClient.convertToType(data['excludedTags'], ['String']);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RestRCampaign</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RestRCampaign</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RestRCampaign.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }
        // ensure the json data is a string
        if (data['preheader'] && !(typeof data['preheader'] === 'string' || data['preheader'] instanceof String)) {
            throw new Error("Expected the field `preheader` to be a primitive type in the JSON string but got " + data['preheader']);
        }
        // ensure the json data is a string
        if (data['sender'] && !(typeof data['sender'] === 'string' || data['sender'] instanceof String)) {
            throw new Error("Expected the field `sender` to be a primitive type in the JSON string but got " + data['sender']);
        }
        // ensure the json data is a string
        if (data['htmlContent'] && !(typeof data['htmlContent'] === 'string' || data['htmlContent'] instanceof String)) {
            throw new Error("Expected the field `htmlContent` to be a primitive type in the JSON string but got " + data['htmlContent']);
        }
        // ensure the json data is a string
        if (data['textContent'] && !(typeof data['textContent'] === 'string' || data['textContent'] instanceof String)) {
            throw new Error("Expected the field `textContent` to be a primitive type in the JSON string but got " + data['textContent']);
        }
        // ensure the json data is a string
        if (data['scheduleCondition'] && !(typeof data['scheduleCondition'] === 'string' || data['scheduleCondition'] instanceof String)) {
            throw new Error("Expected the field `scheduleCondition` to be a primitive type in the JSON string but got " + data['scheduleCondition']);
        }
        // ensure the json data is a string
        if (data['timeCondition'] && !(typeof data['timeCondition'] === 'string' || data['timeCondition'] instanceof String)) {
            throw new Error("Expected the field `timeCondition` to be a primitive type in the JSON string but got " + data['timeCondition']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }
        // ensure the json data is a string
        if (data['preferredTimeCondition'] && !(typeof data['preferredTimeCondition'] === 'string' || data['preferredTimeCondition'] instanceof String)) {
            throw new Error("Expected the field `preferredTimeCondition` to be a primitive type in the JSON string but got " + data['preferredTimeCondition']);
        }
        // ensure the json data is a string
        if (data['preferredTimezone'] && !(typeof data['preferredTimezone'] === 'string' || data['preferredTimezone'] instanceof String)) {
            throw new Error("Expected the field `preferredTimezone` to be a primitive type in the JSON string but got " + data['preferredTimezone']);
        }
        // ensure the json data is a string
        if (data['strategy'] && !(typeof data['strategy'] === 'string' || data['strategy'] instanceof String)) {
            throw new Error("Expected the field `strategy` to be a primitive type in the JSON string but got " + data['strategy']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['includedSegments'])) {
            throw new Error("Expected the field `includedSegments` to be an array in the JSON data but got " + data['includedSegments']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['includedLists'])) {
            throw new Error("Expected the field `includedLists` to be an array in the JSON data but got " + data['includedLists']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['includedTags'])) {
            throw new Error("Expected the field `includedTags` to be an array in the JSON data but got " + data['includedTags']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['excludedSegments'])) {
            throw new Error("Expected the field `excludedSegments` to be an array in the JSON data but got " + data['excludedSegments']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['excludedLists'])) {
            throw new Error("Expected the field `excludedLists` to be an array in the JSON data but got " + data['excludedLists']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['excludedTags'])) {
            throw new Error("Expected the field `excludedTags` to be an array in the JSON data but got " + data['excludedTags']);
        }

        return true;
    }

/**
     * Returns Internal campaign name
     * @return {String}
     */
    getName() {
        return this.name;
    }

    /**
     * Sets Internal campaign name
     * @param {String} name Internal campaign name
     */
    setName(name) {
        this['name'] = name;
    }
/**
     * Returns Email subject line
     * @return {String}
     */
    getSubject() {
        return this.subject;
    }

    /**
     * Sets Email subject line
     * @param {String} subject Email subject line
     */
    setSubject(subject) {
        this['subject'] = subject;
    }
/**
     * Returns Email preview text
     * @return {String}
     */
    getPreheader() {
        return this.preheader;
    }

    /**
     * Sets Email preview text
     * @param {String} preheader Email preview text
     */
    setPreheader(preheader) {
        this['preheader'] = preheader;
    }
/**
     * Returns Sender id
     * @return {String}
     */
    getSender() {
        return this.sender;
    }

    /**
     * Sets Sender id
     * @param {String} sender Sender id
     */
    setSender(sender) {
        this['sender'] = sender;
    }
/**
     * Returns HTML email content
     * @return {String}
     */
    getHtmlContent() {
        return this.htmlContent;
    }

    /**
     * Sets HTML email content
     * @param {String} htmlContent HTML email content
     */
    setHtmlContent(htmlContent) {
        this['htmlContent'] = htmlContent;
    }
/**
     * Returns Plain text email content
     * @return {String}
     */
    getTextContent() {
        return this.textContent;
    }

    /**
     * Sets Plain text email content
     * @param {String} textContent Plain text email content
     */
    setTextContent(textContent) {
        this['textContent'] = textContent;
    }
/**
     * Returns When to send (if scheduled)
     * @return {Date}
     */
    getScheduleTime() {
        return this.scheduleTime;
    }

    /**
     * Sets When to send (if scheduled)
     * @param {Date} scheduleTime When to send (if scheduled)
     */
    setScheduleTime(scheduleTime) {
        this['scheduleTime'] = scheduleTime;
    }
/**
     * Returns Campaign scheduling type.  **Values:** - `0` - Schedule later - `1` - Send Now 
     * @return {Number}
     */
    getScheduleType() {
        return this.scheduleType;
    }

    /**
     * Sets Campaign scheduling type.  **Values:** - `0` - Schedule later - `1` - Send Now 
     * @param {Number} scheduleType Campaign scheduling type.  **Values:** - `0` - Schedule later - `1` - Send Now 
     */
    setScheduleType(scheduleType) {
        this['scheduleType'] = scheduleType;
    }
/**
     * Returns datetime for scheduled campaigns (required if scheduleType=1)
     * @return {String}
     */
    getScheduleCondition() {
        return this.scheduleCondition;
    }

    /**
     * Sets datetime for scheduled campaigns (required if scheduleType=1)
     * @param {String} scheduleCondition datetime for scheduled campaigns (required if scheduleType=1)
     */
    setScheduleCondition(scheduleCondition) {
        this['scheduleCondition'] = scheduleCondition;
    }
/**
     * Returns Time-related condition for the campaign
     * @return {String}
     */
    getTimeCondition() {
        return this.timeCondition;
    }

    /**
     * Sets Time-related condition for the campaign
     * @param {String} timeCondition Time-related condition for the campaign
     */
    setTimeCondition(timeCondition) {
        this['timeCondition'] = timeCondition;
    }
/**
     * Returns Campaign timezone
     * @return {String}
     */
    getTimezone() {
        return this.timezone;
    }

    /**
     * Sets Campaign timezone
     * @param {String} timezone Campaign timezone
     */
    setTimezone(timezone) {
        this['timezone'] = timezone;
    }
/**
     * Returns Timezone for the scheduled send
     * @return {Boolean}
     */
    getSmartSend() {
        return this.smartSend;
    }

    /**
     * Sets Timezone for the scheduled send
     * @param {Boolean} smartSend Timezone for the scheduled send
     */
    setSmartSend(smartSend) {
        this['smartSend'] = smartSend;
    }
/**
     * Returns Send at specified time in each contact's timezone
     * @return {Boolean}
     */
    getSendInContactsTimezone() {
        return this.sendInContactsTimezone;
    }

    /**
     * Sets Send at specified time in each contact's timezone
     * @param {Boolean} sendInContactsTimezone Send at specified time in each contact's timezone
     */
    setSendInContactsTimezone(sendInContactsTimezone) {
        this['sendInContactsTimezone'] = sendInContactsTimezone;
    }
/**
     * Returns Preferred time condition, in case of smartSend and sendInContactTimeZone
     * @return {String}
     */
    getPreferredTimeCondition() {
        return this.preferredTimeCondition;
    }

    /**
     * Sets Preferred time condition, in case of smartSend and sendInContactTimeZone
     * @param {String} preferredTimeCondition Preferred time condition, in case of smartSend and sendInContactTimeZone
     */
    setPreferredTimeCondition(preferredTimeCondition) {
        this['preferredTimeCondition'] = preferredTimeCondition;
    }
/**
     * Returns Preferred timezone for smart send optimization
     * @return {String}
     */
    getPreferredTimezone() {
        return this.preferredTimezone;
    }

    /**
     * Sets Preferred timezone for smart send optimization
     * @param {String} preferredTimezone Preferred timezone for smart send optimization
     */
    setPreferredTimezone(preferredTimezone) {
        this['preferredTimezone'] = preferredTimezone;
    }
/**
     * Returns Campaign delivery strategy
     * @return {String}
     */
    getStrategy() {
        return this.strategy;
    }

    /**
     * Sets Campaign delivery strategy
     * @param {String} strategy Campaign delivery strategy
     */
    setStrategy(strategy) {
        this['strategy'] = strategy;
    }
/**
     * Returns Included segment IDs
     * @return {Array.<String>}
     */
    getIncludedSegments() {
        return this.includedSegments;
    }

    /**
     * Sets Included segment IDs
     * @param {Array.<String>} includedSegments Included segment IDs
     */
    setIncludedSegments(includedSegments) {
        this['includedSegments'] = includedSegments;
    }
/**
     * Returns Included list IDs with prefix
     * @return {Array.<String>}
     */
    getIncludedLists() {
        return this.includedLists;
    }

    /**
     * Sets Included list IDs with prefix
     * @param {Array.<String>} includedLists Included list IDs with prefix
     */
    setIncludedLists(includedLists) {
        this['includedLists'] = includedLists;
    }
/**
     * Returns Included tag IDs with prefix
     * @return {Array.<String>}
     */
    getIncludedTags() {
        return this.includedTags;
    }

    /**
     * Sets Included tag IDs with prefix
     * @param {Array.<String>} includedTags Included tag IDs with prefix
     */
    setIncludedTags(includedTags) {
        this['includedTags'] = includedTags;
    }
/**
     * Returns Excluded segment IDs
     * @return {Array.<String>}
     */
    getExcludedSegments() {
        return this.excludedSegments;
    }

    /**
     * Sets Excluded segment IDs
     * @param {Array.<String>} excludedSegments Excluded segment IDs
     */
    setExcludedSegments(excludedSegments) {
        this['excludedSegments'] = excludedSegments;
    }
/**
     * Returns Excluded list IDs with prefix
     * @return {Array.<String>}
     */
    getExcludedLists() {
        return this.excludedLists;
    }

    /**
     * Sets Excluded list IDs with prefix
     * @param {Array.<String>} excludedLists Excluded list IDs with prefix
     */
    setExcludedLists(excludedLists) {
        this['excludedLists'] = excludedLists;
    }
/**
     * Returns Excluded tag IDs with prefix
     * @return {Array.<String>}
     */
    getExcludedTags() {
        return this.excludedTags;
    }

    /**
     * Sets Excluded tag IDs with prefix
     * @param {Array.<String>} excludedTags Excluded tag IDs with prefix
     */
    setExcludedTags(excludedTags) {
        this['excludedTags'] = excludedTags;
    }
/**
     * @return {Date}
     */
    getCreated() {
        return this.created;
    }

    /**
     * @param {Date} created
     */
    setCreated(created) {
        this['created'] = created;
    }
/**
     * @return {Date}
     */
    getUpdated() {
        return this.updated;
    }

    /**
     * @param {Date} updated
     */
    setUpdated(updated) {
        this['updated'] = updated;
    }

}

RestRCampaign.RequiredProperties = ["name", "subject", "sender", "scheduleTime", "scheduleType", "scheduleCondition", "includedLists", "excludedLists"];

/**
 * Internal campaign name
 * @member {String} name
 */
RestRCampaign.prototype['name'] = undefined;

/**
 * Email subject line
 * @member {String} subject
 */
RestRCampaign.prototype['subject'] = undefined;

/**
 * Email preview text
 * @member {String} preheader
 */
RestRCampaign.prototype['preheader'] = undefined;

/**
 * Sender id
 * @member {String} sender
 */
RestRCampaign.prototype['sender'] = undefined;

/**
 * HTML email content
 * @member {String} htmlContent
 */
RestRCampaign.prototype['htmlContent'] = undefined;

/**
 * Plain text email content
 * @member {String} textContent
 */
RestRCampaign.prototype['textContent'] = undefined;

/**
 * When to send (if scheduled)
 * @member {Date} scheduleTime
 */
RestRCampaign.prototype['scheduleTime'] = undefined;

/**
 * Campaign scheduling type.  **Values:** - `0` - Schedule later - `1` - Send Now 
 * @member {Number} scheduleType
 * @default 0
 */
RestRCampaign.prototype['scheduleType'] = 0;

/**
 * datetime for scheduled campaigns (required if scheduleType=1)
 * @member {String} scheduleCondition
 */
RestRCampaign.prototype['scheduleCondition'] = undefined;

/**
 * Time-related condition for the campaign
 * @member {String} timeCondition
 */
RestRCampaign.prototype['timeCondition'] = undefined;

/**
 * Campaign timezone
 * @member {String} timezone
 */
RestRCampaign.prototype['timezone'] = undefined;

/**
 * Timezone for the scheduled send
 * @member {Boolean} smartSend
 */
RestRCampaign.prototype['smartSend'] = undefined;

/**
 * Send at specified time in each contact's timezone
 * @member {Boolean} sendInContactsTimezone
 */
RestRCampaign.prototype['sendInContactsTimezone'] = undefined;

/**
 * Preferred time condition, in case of smartSend and sendInContactTimeZone
 * @member {String} preferredTimeCondition
 */
RestRCampaign.prototype['preferredTimeCondition'] = undefined;

/**
 * Preferred timezone for smart send optimization
 * @member {String} preferredTimezone
 */
RestRCampaign.prototype['preferredTimezone'] = undefined;

/**
 * Campaign delivery strategy
 * @member {String} strategy
 */
RestRCampaign.prototype['strategy'] = undefined;

/**
 * Included segment IDs
 * @member {Array.<String>} includedSegments
 */
RestRCampaign.prototype['includedSegments'] = undefined;

/**
 * Included list IDs with prefix
 * @member {Array.<String>} includedLists
 */
RestRCampaign.prototype['includedLists'] = undefined;

/**
 * Included tag IDs with prefix
 * @member {Array.<String>} includedTags
 */
RestRCampaign.prototype['includedTags'] = undefined;

/**
 * Excluded segment IDs
 * @member {Array.<String>} excludedSegments
 */
RestRCampaign.prototype['excludedSegments'] = undefined;

/**
 * Excluded list IDs with prefix
 * @member {Array.<String>} excludedLists
 */
RestRCampaign.prototype['excludedLists'] = undefined;

/**
 * Excluded tag IDs with prefix
 * @member {Array.<String>} excludedTags
 */
RestRCampaign.prototype['excludedTags'] = undefined;

/**
 * @member {Date} created
 */
RestRCampaign.prototype['created'] = undefined;

/**
 * @member {Date} updated
 */
RestRCampaign.prototype['updated'] = undefined;






export default RestRCampaign;

