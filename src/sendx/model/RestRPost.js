/**
 * SendX REST API
 * # SendX REST API Documentation  ## üöÄ Introduction  The SendX API is organized around REST principles. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  **Key Features:** - üîí **Security**: Team-based authentication with optional member-level access - üéØ **Resource-Oriented**: RESTful design with clear resource boundaries - üìä **Rich Data Models**: Three-layer model system (Input/Output/Internal) - üîó **Relationships**: Automatic prefix handling for resource relationships - üìà **Scalable**: Built for high-volume email marketing operations  ## üèóÔ∏è Architecture Overview  SendX uses a three-layer model architecture:  1. **Input Models** (`RestE*`): For API requests 2. **Output Models** (`RestR*`): For API responses with prefixed IDs 3. **Internal Models**: Core business logic (not exposed in API)  ## üîê Security & Authentication  SendX uses API key authentication:  ### Team API Key ```http X-Team-ApiKey: YOUR_TEAM_API_KEY ``` - **Required for all requests** - Team-level access to resources - Available in SendX Settings ‚Üí Team API Key  ## üÜî Encrypted ID System  SendX uses encrypted IDs for security and better developer experience:  - **Internal IDs**: Sequential integers (not exposed) - **Encrypted IDs**: 22-character alphanumeric strings - **Prefixed IDs**: Resource-type prefixes in API responses (`contact_<22-char-id>`)  ### ID Format  **All resource IDs follow this pattern:** ``` <resource_prefix>_<22_character_alphanumeric_string> ```  **Example:** ```json {   \"id\": \"contact_BnKjkbBBS500CoBCP0oChQ\",   \"lists\": [\"list_OcuxJHdiAvujmwQVJfd3ss\", \"list_0tOFLp5RgV7s3LNiHrjGYs\"],   \"tags\": [\"tag_UhsDkjL772Qbj5lWtT62VK\", \"tag_fL7t9lsnZ9swvx2HrtQ9wM\"] } ```  ## üìö Resource Prefixes  | Resource | Prefix | Example | |----------|--------|---------| | Contact | `contact_` | `contact_BnKjkbBBS500CoBCP0oChQ` | | Campaign | `campaign_` | `campaign_LUE9BTxmksSmqHWbh96zsn` | | List | `list_` | `list_OcuxJHdiAvujmwQVJfd3ss` | | Tag | `tag_` | `tag_UhsDkjL772Qbj5lWtT62VK` | | Sender | `sender_` | `sender_4vK3WFhMgvOwUNyaL4QxCD` | | Template | `template_` | `template_f3lJvTEhSjKGVb5Lwc5SWS` | | Custom Field | `field_` | `field_MnuqBAG2NPLm7PZMWbjQxt` | | Webhook | `webhook_` | `webhook_9l154iiXlZoPo7vngmamee` | | Post | `post_` | `post_XyZ123aBc456DeF789GhI` | | Post Category | `post_category_` | `post_category_YzS1wOU20yw87UUHKxMzwn` | | Post Tag | `post_tag_` | `post_tag_123XyZ456AbC` | | Member | `member_` | `member_JkL012MnO345PqR678` |  ## üéØ Best Practices  ### Error Handling - **Always check status codes**: 2xx = success, 4xx = client error, 5xx = server error - **Read error messages**: Descriptive messages help debug issues - **Handle rate limits**: Respect API rate limits for optimal performance  ### Data Validation - **Email format**: Must be valid email addresses - **Required fields**: Check documentation for mandatory fields - **Field lengths**: Respect maximum length constraints  ### Performance - **Pagination**: Use offset/limit for large datasets - **Batch operations**: Process multiple items when supported - **Caching**: Cache responses when appropriate  ## üõ†Ô∏è SDKs & Integration  Official SDKs available for: - [Golang](https://github.com/sendx/sendx-go-sdk) - [Python](https://github.com/sendx/sendx-python-sdk) - [Ruby](https://github.com/sendx/sendx-ruby-sdk) - [Java](https://github.com/sendx/sendx-java-sdk) - [PHP](https://github.com/sendx/sendx-php-sdk) - [JavaScript](https://github.com/sendx/sendx-javascript-sdk)  ## üìû Support  Need help? Contact us: - üí¨ **Website Chat**: Available on sendx.io - üìß **Email**: hello@sendx.io - üìö **Documentation**: Full guides at help.sendx.io  ---  **API Endpoint:** `https://api.sendx.io/api/v1/rest`  [<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\">](https://god.gw.postman.com/run-collection/33476323-44b198b0-5219-4619-a01f-cfc24d573885?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D33476323-44b198b0-5219-4619-a01f-cfc24d573885%26entityType%3Dcollection%26workspaceId%3D6b1e4f65-96a9-4136-9512-6266c852517e) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RestRPost model module.
 * @module sendx/model/RestRPost
 * @version 1.0.0
 */
class RestRPost {
    /**
     * Constructs a new <code>RestRPost</code>.
     * @alias module:sendx/model/RestRPost
     */
    constructor() { 
        
        RestRPost.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RestRPost</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sendx/model/RestRPost} obj Optional instance to populate.
     * @return {module:sendx/model/RestRPost} The populated <code>RestRPost</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RestRPost();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('postTitle')) {
                obj['postTitle'] = ApiClient.convertToType(data['postTitle'], 'String');
            }
            if (data.hasOwnProperty('postDescription')) {
                obj['postDescription'] = ApiClient.convertToType(data['postDescription'], 'String');
            }
            if (data.hasOwnProperty('postCategory')) {
                obj['postCategory'] = ApiClient.convertToType(data['postCategory'], 'String');
            }
            if (data.hasOwnProperty('member')) {
                obj['member'] = ApiClient.convertToType(data['member'], 'String');
            }
            if (data.hasOwnProperty('postThumbnail')) {
                obj['postThumbnail'] = ApiClient.convertToType(data['postThumbnail'], 'String');
            }
            if (data.hasOwnProperty('isPublished')) {
                obj['isPublished'] = ApiClient.convertToType(data['isPublished'], 'Boolean');
            }
            if (data.hasOwnProperty('includedTags')) {
                obj['includedTags'] = ApiClient.convertToType(data['includedTags'], ['String']);
            }
            if (data.hasOwnProperty('postSlug')) {
                obj['postSlug'] = ApiClient.convertToType(data['postSlug'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('pageTitle')) {
                obj['pageTitle'] = ApiClient.convertToType(data['pageTitle'], 'String');
            }
            if (data.hasOwnProperty('pageDescription')) {
                obj['pageDescription'] = ApiClient.convertToType(data['pageDescription'], 'String');
            }
            if (data.hasOwnProperty('pageKeywords')) {
                obj['pageKeywords'] = ApiClient.convertToType(data['pageKeywords'], 'String');
            }
            if (data.hasOwnProperty('socialTitle')) {
                obj['socialTitle'] = ApiClient.convertToType(data['socialTitle'], 'String');
            }
            if (data.hasOwnProperty('socialDescription')) {
                obj['socialDescription'] = ApiClient.convertToType(data['socialDescription'], 'String');
            }
            if (data.hasOwnProperty('socialImageUrl')) {
                obj['socialImageUrl'] = ApiClient.convertToType(data['socialImageUrl'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RestRPost</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RestRPost</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['postTitle'] && !(typeof data['postTitle'] === 'string' || data['postTitle'] instanceof String)) {
            throw new Error("Expected the field `postTitle` to be a primitive type in the JSON string but got " + data['postTitle']);
        }
        // ensure the json data is a string
        if (data['postDescription'] && !(typeof data['postDescription'] === 'string' || data['postDescription'] instanceof String)) {
            throw new Error("Expected the field `postDescription` to be a primitive type in the JSON string but got " + data['postDescription']);
        }
        // ensure the json data is a string
        if (data['postCategory'] && !(typeof data['postCategory'] === 'string' || data['postCategory'] instanceof String)) {
            throw new Error("Expected the field `postCategory` to be a primitive type in the JSON string but got " + data['postCategory']);
        }
        // ensure the json data is a string
        if (data['member'] && !(typeof data['member'] === 'string' || data['member'] instanceof String)) {
            throw new Error("Expected the field `member` to be a primitive type in the JSON string but got " + data['member']);
        }
        // ensure the json data is a string
        if (data['postThumbnail'] && !(typeof data['postThumbnail'] === 'string' || data['postThumbnail'] instanceof String)) {
            throw new Error("Expected the field `postThumbnail` to be a primitive type in the JSON string but got " + data['postThumbnail']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['includedTags'])) {
            throw new Error("Expected the field `includedTags` to be an array in the JSON data but got " + data['includedTags']);
        }
        // ensure the json data is a string
        if (data['postSlug'] && !(typeof data['postSlug'] === 'string' || data['postSlug'] instanceof String)) {
            throw new Error("Expected the field `postSlug` to be a primitive type in the JSON string but got " + data['postSlug']);
        }
        // ensure the json data is a string
        if (data['pageTitle'] && !(typeof data['pageTitle'] === 'string' || data['pageTitle'] instanceof String)) {
            throw new Error("Expected the field `pageTitle` to be a primitive type in the JSON string but got " + data['pageTitle']);
        }
        // ensure the json data is a string
        if (data['pageDescription'] && !(typeof data['pageDescription'] === 'string' || data['pageDescription'] instanceof String)) {
            throw new Error("Expected the field `pageDescription` to be a primitive type in the JSON string but got " + data['pageDescription']);
        }
        // ensure the json data is a string
        if (data['pageKeywords'] && !(typeof data['pageKeywords'] === 'string' || data['pageKeywords'] instanceof String)) {
            throw new Error("Expected the field `pageKeywords` to be a primitive type in the JSON string but got " + data['pageKeywords']);
        }
        // ensure the json data is a string
        if (data['socialTitle'] && !(typeof data['socialTitle'] === 'string' || data['socialTitle'] instanceof String)) {
            throw new Error("Expected the field `socialTitle` to be a primitive type in the JSON string but got " + data['socialTitle']);
        }
        // ensure the json data is a string
        if (data['socialDescription'] && !(typeof data['socialDescription'] === 'string' || data['socialDescription'] instanceof String)) {
            throw new Error("Expected the field `socialDescription` to be a primitive type in the JSON string but got " + data['socialDescription']);
        }
        // ensure the json data is a string
        if (data['socialImageUrl'] && !(typeof data['socialImageUrl'] === 'string' || data['socialImageUrl'] instanceof String)) {
            throw new Error("Expected the field `socialImageUrl` to be a primitive type in the JSON string but got " + data['socialImageUrl']);
        }

        return true;
    }

/**
     * @return {String}
     */
    getId() {
        return this.id;
    }

    /**
     * @param {String} id
     */
    setId(id) {
        this['id'] = id;
    }
/**
     * @return {String}
     */
    getName() {
        return this.name;
    }

    /**
     * @param {String} name
     */
    setName(name) {
        this['name'] = name;
    }
/**
     * @return {String}
     */
    getPostTitle() {
        return this.postTitle;
    }

    /**
     * @param {String} postTitle
     */
    setPostTitle(postTitle) {
        this['postTitle'] = postTitle;
    }
/**
     * @return {String}
     */
    getPostDescription() {
        return this.postDescription;
    }

    /**
     * @param {String} postDescription
     */
    setPostDescription(postDescription) {
        this['postDescription'] = postDescription;
    }
/**
     * @return {String}
     */
    getPostCategory() {
        return this.postCategory;
    }

    /**
     * @param {String} postCategory
     */
    setPostCategory(postCategory) {
        this['postCategory'] = postCategory;
    }
/**
     * @return {String}
     */
    getMember() {
        return this.member;
    }

    /**
     * @param {String} member
     */
    setMember(member) {
        this['member'] = member;
    }
/**
     * @return {String}
     */
    getPostThumbnail() {
        return this.postThumbnail;
    }

    /**
     * @param {String} postThumbnail
     */
    setPostThumbnail(postThumbnail) {
        this['postThumbnail'] = postThumbnail;
    }
/**
     * @return {Boolean}
     */
    getIsPublished() {
        return this.isPublished;
    }

    /**
     * @param {Boolean} isPublished
     */
    setIsPublished(isPublished) {
        this['isPublished'] = isPublished;
    }
/**
     * @return {Array.<String>}
     */
    getIncludedTags() {
        return this.includedTags;
    }

    /**
     * @param {Array.<String>} includedTags
     */
    setIncludedTags(includedTags) {
        this['includedTags'] = includedTags;
    }
/**
     * @return {String}
     */
    getPostSlug() {
        return this.postSlug;
    }

    /**
     * @param {String} postSlug
     */
    setPostSlug(postSlug) {
        this['postSlug'] = postSlug;
    }
/**
     * @return {Number}
     */
    getStatus() {
        return this.status;
    }

    /**
     * @param {Number} status
     */
    setStatus(status) {
        this['status'] = status;
    }
/**
     * @return {String}
     */
    getPageTitle() {
        return this.pageTitle;
    }

    /**
     * @param {String} pageTitle
     */
    setPageTitle(pageTitle) {
        this['pageTitle'] = pageTitle;
    }
/**
     * @return {String}
     */
    getPageDescription() {
        return this.pageDescription;
    }

    /**
     * @param {String} pageDescription
     */
    setPageDescription(pageDescription) {
        this['pageDescription'] = pageDescription;
    }
/**
     * @return {String}
     */
    getPageKeywords() {
        return this.pageKeywords;
    }

    /**
     * @param {String} pageKeywords
     */
    setPageKeywords(pageKeywords) {
        this['pageKeywords'] = pageKeywords;
    }
/**
     * @return {String}
     */
    getSocialTitle() {
        return this.socialTitle;
    }

    /**
     * @param {String} socialTitle
     */
    setSocialTitle(socialTitle) {
        this['socialTitle'] = socialTitle;
    }
/**
     * @return {String}
     */
    getSocialDescription() {
        return this.socialDescription;
    }

    /**
     * @param {String} socialDescription
     */
    setSocialDescription(socialDescription) {
        this['socialDescription'] = socialDescription;
    }
/**
     * @return {String}
     */
    getSocialImageUrl() {
        return this.socialImageUrl;
    }

    /**
     * @param {String} socialImageUrl
     */
    setSocialImageUrl(socialImageUrl) {
        this['socialImageUrl'] = socialImageUrl;
    }
/**
     * @return {Date}
     */
    getCreated() {
        return this.created;
    }

    /**
     * @param {Date} created
     */
    setCreated(created) {
        this['created'] = created;
    }
/**
     * @return {Date}
     */
    getUpdated() {
        return this.updated;
    }

    /**
     * @param {Date} updated
     */
    setUpdated(updated) {
        this['updated'] = updated;
    }

}



/**
 * @member {String} id
 */
RestRPost.prototype['id'] = undefined;

/**
 * @member {String} name
 */
RestRPost.prototype['name'] = undefined;

/**
 * @member {String} postTitle
 */
RestRPost.prototype['postTitle'] = undefined;

/**
 * @member {String} postDescription
 */
RestRPost.prototype['postDescription'] = undefined;

/**
 * @member {String} postCategory
 */
RestRPost.prototype['postCategory'] = undefined;

/**
 * @member {String} member
 */
RestRPost.prototype['member'] = undefined;

/**
 * @member {String} postThumbnail
 */
RestRPost.prototype['postThumbnail'] = undefined;

/**
 * @member {Boolean} isPublished
 */
RestRPost.prototype['isPublished'] = undefined;

/**
 * @member {Array.<String>} includedTags
 */
RestRPost.prototype['includedTags'] = undefined;

/**
 * @member {String} postSlug
 */
RestRPost.prototype['postSlug'] = undefined;

/**
 * @member {Number} status
 */
RestRPost.prototype['status'] = undefined;

/**
 * @member {String} pageTitle
 */
RestRPost.prototype['pageTitle'] = undefined;

/**
 * @member {String} pageDescription
 */
RestRPost.prototype['pageDescription'] = undefined;

/**
 * @member {String} pageKeywords
 */
RestRPost.prototype['pageKeywords'] = undefined;

/**
 * @member {String} socialTitle
 */
RestRPost.prototype['socialTitle'] = undefined;

/**
 * @member {String} socialDescription
 */
RestRPost.prototype['socialDescription'] = undefined;

/**
 * @member {String} socialImageUrl
 */
RestRPost.prototype['socialImageUrl'] = undefined;

/**
 * @member {Date} created
 */
RestRPost.prototype['created'] = undefined;

/**
 * @member {Date} updated
 */
RestRPost.prototype['updated'] = undefined;






export default RestRPost;

