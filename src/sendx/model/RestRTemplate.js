/**
 * SendX REST API
 * # SendX REST API Documentation  ## üöÄ Introduction  The SendX API is organized around REST principles. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  **Key Features:** - üîí **Security**: Team-based authentication with optional member-level access - üéØ **Resource-Oriented**: RESTful design with clear resource boundaries - üìä **Rich Data Models**: Three-layer model system (Input/Output/Internal) - üîó **Relationships**: Automatic prefix handling for resource relationships - üìà **Scalable**: Built for high-volume email marketing operations  ## üèóÔ∏è Architecture Overview  SendX uses a three-layer model architecture:  1. **Input Models** (`RestE*`): For API requests 2. **Output Models** (`RestR*`): For API responses with prefixed IDs 3. **Internal Models**: Core business logic (not exposed in API)  ## üîê Security & Authentication  SendX uses API key authentication:  ### Team API Key ```http X-Team-ApiKey: YOUR_TEAM_API_KEY ``` - **Required for all requests** - Team-level access to resources - Available in SendX Settings ‚Üí Team API Key  ## üÜî Encrypted ID System  SendX uses encrypted IDs for security and better developer experience:  - **Internal IDs**: Sequential integers (not exposed) - **Encrypted IDs**: 22-character alphanumeric strings - **Prefixed IDs**: Resource-type prefixes in API responses (`contact_<22-char-id>`)  ### ID Format  **All resource IDs follow this pattern:** ``` <resource_prefix>_<22_character_alphanumeric_string> ```  **Example:** ```json {   \"id\": \"contact_BnKjkbBBS500CoBCP0oChQ\",   \"lists\": [\"list_OcuxJHdiAvujmwQVJfd3ss\", \"list_0tOFLp5RgV7s3LNiHrjGYs\"],   \"tags\": [\"tag_UhsDkjL772Qbj5lWtT62VK\", \"tag_fL7t9lsnZ9swvx2HrtQ9wM\"] } ```  ## üìö Resource Prefixes  | Resource | Prefix | Example | |----------|--------|---------| | Contact | `contact_` | `contact_BnKjkbBBS500CoBCP0oChQ` | | Campaign | `campaign_` | `campaign_LUE9BTxmksSmqHWbh96zsn` | | List | `list_` | `list_OcuxJHdiAvujmwQVJfd3ss` | | Tag | `tag_` | `tag_UhsDkjL772Qbj5lWtT62VK` | | Sender | `sender_` | `sender_4vK3WFhMgvOwUNyaL4QxCD` | | Template | `template_` | `template_f3lJvTEhSjKGVb5Lwc5SWS` | | Custom Field | `field_` | `field_MnuqBAG2NPLm7PZMWbjQxt` | | Webhook | `webhook_` | `webhook_9l154iiXlZoPo7vngmamee` | | Post | `post_` | `post_XyZ123aBc456DeF789GhI` | | Post Category | `post_category_` | `post_category_YzS1wOU20yw87UUHKxMzwn` | | Post Tag | `post_tag_` | `post_tag_123XyZ456AbC` | | Member | `member_` | `member_JkL012MnO345PqR678` |  ## üéØ Best Practices  ### Error Handling - **Always check status codes**: 2xx = success, 4xx = client error, 5xx = server error - **Read error messages**: Descriptive messages help debug issues - **Handle rate limits**: Respect API rate limits for optimal performance  ### Data Validation - **Email format**: Must be valid email addresses - **Required fields**: Check documentation for mandatory fields - **Field lengths**: Respect maximum length constraints  ### Performance - **Pagination**: Use offset/limit for large datasets - **Batch operations**: Process multiple items when supported - **Caching**: Cache responses when appropriate  ## üõ†Ô∏è SDKs & Integration  Official SDKs available for: - [Golang](https://github.com/sendx/sendx-go-sdk) - [Python](https://github.com/sendx/sendx-python-sdk) - [Ruby](https://github.com/sendx/sendx-ruby-sdk) - [Java](https://github.com/sendx/sendx-java-sdk) - [PHP](https://github.com/sendx/sendx-php-sdk) - [JavaScript](https://github.com/sendx/sendx-javascript-sdk)  ## üìû Support  Need help? Contact us: - üí¨ **Website Chat**: Available on sendx.io - üìß **Email**: hello@sendx.io - üìö **Documentation**: Full guides at help.sendx.io  ---  **API Endpoint:** `https://api.sendx.io/api/v1/rest`  [<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\">](https://god.gw.postman.com/run-collection/33476323-44b198b0-5219-4619-a01f-cfc24d573885?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D33476323-44b198b0-5219-4619-a01f-cfc24d573885%26entityType%3Dcollection%26workspaceId%3D6b1e4f65-96a9-4136-9512-6266c852517e) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RestRTemplate model module.
 * @module sendx/model/RestRTemplate
 * @version 1.0.0
 */
class RestRTemplate {
    /**
     * Constructs a new <code>RestRTemplate</code>.
     * @alias module:sendx/model/RestRTemplate
     */
    constructor() { 
        
        RestRTemplate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RestRTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sendx/model/RestRTemplate} obj Optional instance to populate.
     * @return {module:sendx/model/RestRTemplate} The populated <code>RestRTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RestRTemplate();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('htmlCode')) {
                obj['htmlCode'] = ApiClient.convertToType(data['htmlCode'], 'String');
            }
            if (data.hasOwnProperty('templateCode')) {
                obj['templateCode'] = ApiClient.convertToType(data['templateCode'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'Number');
            }
            if (data.hasOwnProperty('thumbnail')) {
                obj['thumbnail'] = ApiClient.convertToType(data['thumbnail'], 'String');
            }
            if (data.hasOwnProperty('editorType')) {
                obj['editorType'] = ApiClient.convertToType(data['editorType'], 'Number');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RestRTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RestRTemplate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }
        // ensure the json data is a string
        if (data['htmlCode'] && !(typeof data['htmlCode'] === 'string' || data['htmlCode'] instanceof String)) {
            throw new Error("Expected the field `htmlCode` to be a primitive type in the JSON string but got " + data['htmlCode']);
        }
        // ensure the json data is a string
        if (data['templateCode'] && !(typeof data['templateCode'] === 'string' || data['templateCode'] instanceof String)) {
            throw new Error("Expected the field `templateCode` to be a primitive type in the JSON string but got " + data['templateCode']);
        }
        // ensure the json data is a string
        if (data['thumbnail'] && !(typeof data['thumbnail'] === 'string' || data['thumbnail'] instanceof String)) {
            throw new Error("Expected the field `thumbnail` to be a primitive type in the JSON string but got " + data['thumbnail']);
        }

        return true;
    }

/**
     * Returns Unique template identifier with template_ prefix
     * @return {String}
     */
    getId() {
        return this.id;
    }

    /**
     * Sets Unique template identifier with template_ prefix
     * @param {String} id Unique template identifier with template_ prefix
     */
    setId(id) {
        this['id'] = id;
    }
/**
     * Returns Name of the template
     * @return {String}
     */
    getName() {
        return this.name;
    }

    /**
     * Sets Name of the template
     * @param {String} name Name of the template
     */
    setName(name) {
        this['name'] = name;
    }
/**
     * Returns Email subject line (if applicable)
     * @return {String}
     */
    getSubject() {
        return this.subject;
    }

    /**
     * Sets Email subject line (if applicable)
     * @param {String} subject Email subject line (if applicable)
     */
    setSubject(subject) {
        this['subject'] = subject;
    }
/**
     * Returns HTML content of the template
     * @return {String}
     */
    getHtmlCode() {
        return this.htmlCode;
    }

    /**
     * Sets HTML content of the template
     * @param {String} htmlCode HTML content of the template
     */
    setHtmlCode(htmlCode) {
        this['htmlCode'] = htmlCode;
    }
/**
     * Returns Template code for visual editors (JSON structure)
     * @return {String}
     */
    getTemplateCode() {
        return this.templateCode;
    }

    /**
     * Sets Template code for visual editors (JSON structure)
     * @param {String} templateCode Template code for visual editors (JSON structure)
     */
    setTemplateCode(templateCode) {
        this['templateCode'] = templateCode;
    }
/**
     * Returns Template type.  **Values:** - `0` - Email template - `1` - Other types 
     * @return {Number}
     */
    getType() {
        return this.type;
    }

    /**
     * Sets Template type.  **Values:** - `0` - Email template - `1` - Other types 
     * @param {Number} type Template type.  **Values:** - `0` - Email template - `1` - Other types 
     */
    setType(type) {
        this['type'] = type;
    }
/**
     * Returns URL to template thumbnail image
     * @return {String}
     */
    getThumbnail() {
        return this.thumbnail;
    }

    /**
     * Sets URL to template thumbnail image
     * @param {String} thumbnail URL to template thumbnail image
     */
    setThumbnail(thumbnail) {
        this['thumbnail'] = thumbnail;
    }
/**
     * Returns Editor type used to create the template.  **Values:** - `0` - PlainText - `1` - DragDrop - `2` - SendxEditor 
     * @return {module:sendx/model/RestRTemplate.EditorTypeEnum}
     */
    getEditorType() {
        return this.editorType;
    }

    /**
     * Sets Editor type used to create the template.  **Values:** - `0` - PlainText - `1` - DragDrop - `2` - SendxEditor 
     * @param {module:sendx/model/RestRTemplate.EditorTypeEnum} editorType Editor type used to create the template.  **Values:** - `0` - PlainText - `1` - DragDrop - `2` - SendxEditor 
     */
    setEditorType(editorType) {
        this['editorType'] = editorType;
    }
/**
     * Returns Template creation timestamp
     * @return {Date}
     */
    getCreated() {
        return this.created;
    }

    /**
     * Sets Template creation timestamp
     * @param {Date} created Template creation timestamp
     */
    setCreated(created) {
        this['created'] = created;
    }
/**
     * Returns Template last update timestamp
     * @return {Date}
     */
    getUpdated() {
        return this.updated;
    }

    /**
     * Sets Template last update timestamp
     * @param {Date} updated Template last update timestamp
     */
    setUpdated(updated) {
        this['updated'] = updated;
    }

}



/**
 * Unique template identifier with template_ prefix
 * @member {String} id
 */
RestRTemplate.prototype['id'] = undefined;

/**
 * Name of the template
 * @member {String} name
 */
RestRTemplate.prototype['name'] = undefined;

/**
 * Email subject line (if applicable)
 * @member {String} subject
 */
RestRTemplate.prototype['subject'] = undefined;

/**
 * HTML content of the template
 * @member {String} htmlCode
 */
RestRTemplate.prototype['htmlCode'] = undefined;

/**
 * Template code for visual editors (JSON structure)
 * @member {String} templateCode
 */
RestRTemplate.prototype['templateCode'] = undefined;

/**
 * Template type.  **Values:** - `0` - Email template - `1` - Other types 
 * @member {Number} type
 */
RestRTemplate.prototype['type'] = undefined;

/**
 * URL to template thumbnail image
 * @member {String} thumbnail
 */
RestRTemplate.prototype['thumbnail'] = undefined;

/**
 * Editor type used to create the template.  **Values:** - `0` - PlainText - `1` - DragDrop - `2` - SendxEditor 
 * @member {module:sendx/model/RestRTemplate.EditorTypeEnum} editorType
 */
RestRTemplate.prototype['editorType'] = undefined;

/**
 * Template creation timestamp
 * @member {Date} created
 */
RestRTemplate.prototype['created'] = undefined;

/**
 * Template last update timestamp
 * @member {Date} updated
 */
RestRTemplate.prototype['updated'] = undefined;





/**
 * Allowed values for the <code>editorType</code> property.
 * @enum {Number}
 * @readonly
 */
RestRTemplate['EditorTypeEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2
};



export default RestRTemplate;

