/**
 * SendX REST API
 * # SendX REST API Documentation  ## üöÄ Introduction  The SendX API is organized around REST principles. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  **Key Features:** - üîí **Security**: Team-based authentication with optional member-level access - üéØ **Resource-Oriented**: RESTful design with clear resource boundaries - üìä **Rich Data Models**: Three-layer model system (Input/Output/Internal) - üîó **Relationships**: Automatic prefix handling for resource relationships - üìà **Scalable**: Built for high-volume email marketing operations  ## üèóÔ∏è Architecture Overview  SendX uses a three-layer model architecture:  1. **Input Models** (`RestE*`): For API requests 2. **Output Models** (`RestR*`): For API responses with prefixed IDs 3. **Internal Models**: Core business logic (not exposed in API)  ## üîê Security & Authentication  SendX uses API key authentication:  ### Team API Key ```http X-Team-ApiKey: YOUR_TEAM_API_KEY ``` - **Required for all requests** - Team-level access to resources - Available in SendX Settings ‚Üí Team API Key  ## üÜî Encrypted ID System  SendX uses encrypted IDs for security and better developer experience:  - **Internal IDs**: Sequential integers (not exposed) - **Encrypted IDs**: 22-character alphanumeric strings - **Prefixed IDs**: Resource-type prefixes in API responses (`contact_<22-char-id>`)  ### ID Format  **All resource IDs follow this pattern:** ``` <resource_prefix>_<22_character_alphanumeric_string> ```  **Example:** ```json {   \"id\": \"contact_BnKjkbBBS500CoBCP0oChQ\",   \"lists\": [\"list_OcuxJHdiAvujmwQVJfd3ss\", \"list_0tOFLp5RgV7s3LNiHrjGYs\"],   \"tags\": [\"tag_UhsDkjL772Qbj5lWtT62VK\", \"tag_fL7t9lsnZ9swvx2HrtQ9wM\"] } ```  ## üìö Resource Prefixes  | Resource | Prefix | Example | |----------|--------|---------| | Contact | `contact_` | `contact_BnKjkbBBS500CoBCP0oChQ` | | Campaign | `campaign_` | `campaign_LUE9BTxmksSmqHWbh96zsn` | | List | `list_` | `list_OcuxJHdiAvujmwQVJfd3ss` | | Tag | `tag_` | `tag_UhsDkjL772Qbj5lWtT62VK` | | Sender | `sender_` | `sender_4vK3WFhMgvOwUNyaL4QxCD` | | Template | `template_` | `template_f3lJvTEhSjKGVb5Lwc5SWS` | | Custom Field | `field_` | `field_MnuqBAG2NPLm7PZMWbjQxt` | | Webhook | `webhook_` | `webhook_9l154iiXlZoPo7vngmamee` | | Post | `post_` | `post_XyZ123aBc456DeF789GhI` | | Post Category | `post_category_` | `post_category_YzS1wOU20yw87UUHKxMzwn` | | Post Tag | `post_tag_` | `post_tag_123XyZ456AbC` | | Member | `member_` | `member_JkL012MnO345PqR678` |  ## üéØ Best Practices  ### Error Handling - **Always check status codes**: 2xx = success, 4xx = client error, 5xx = server error - **Read error messages**: Descriptive messages help debug issues - **Handle rate limits**: Respect API rate limits for optimal performance  ### Data Validation - **Email format**: Must be valid email addresses - **Required fields**: Check documentation for mandatory fields - **Field lengths**: Respect maximum length constraints  ### Performance - **Pagination**: Use offset/limit for large datasets - **Batch operations**: Process multiple items when supported - **Caching**: Cache responses when appropriate  ## üõ†Ô∏è SDKs & Integration  Official SDKs available for: - [Golang](https://github.com/sendx/sendx-go-sdk) - [Python](https://github.com/sendx/sendx-python-sdk) - [Ruby](https://github.com/sendx/sendx-ruby-sdk) - [Java](https://github.com/sendx/sendx-java-sdk) - [PHP](https://github.com/sendx/sendx-php-sdk) - [JavaScript](https://github.com/sendx/sendx-javascript-sdk)  ## üìû Support  Need help? Contact us: - üí¨ **Website Chat**: Available on sendx.io - üìß **Email**: hello@sendx.io - üìö **Documentation**: Full guides at help.sendx.io  ---  **API Endpoint:** `https://api.sendx.io/api/v1/rest`  [<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\">](https://god.gw.postman.com/run-collection/33476323-44b198b0-5219-4619-a01f-cfc24d573885?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D33476323-44b198b0-5219-4619-a01f-cfc24d573885%26entityType%3Dcollection%26workspaceId%3D6b1e4f65-96a9-4136-9512-6266c852517e) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RestRWebhook model module.
 * @module sendx/model/RestRWebhook
 * @version 1.0.0
 */
class RestRWebhook {
    /**
     * Constructs a new <code>RestRWebhook</code>.
     * @alias module:sendx/model/RestRWebhook
     */
    constructor() { 
        
        RestRWebhook.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['enabled'] = true;
        obj['unsubscribed'] = false;
        obj['dropped'] = false;
        obj['bounced'] = false;
        obj['markedSpam'] = false;
        obj['clicked'] = false;
        obj['opened'] = false;
        obj['contactCreated'] = false;
    }

    /**
     * Constructs a <code>RestRWebhook</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sendx/model/RestRWebhook} obj Optional instance to populate.
     * @return {module:sendx/model/RestRWebhook} The populated <code>RestRWebhook</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RestRWebhook();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('unsubscribed')) {
                obj['unsubscribed'] = ApiClient.convertToType(data['unsubscribed'], 'Boolean');
            }
            if (data.hasOwnProperty('dropped')) {
                obj['dropped'] = ApiClient.convertToType(data['dropped'], 'Boolean');
            }
            if (data.hasOwnProperty('bounced')) {
                obj['bounced'] = ApiClient.convertToType(data['bounced'], 'Boolean');
            }
            if (data.hasOwnProperty('markedSpam')) {
                obj['markedSpam'] = ApiClient.convertToType(data['markedSpam'], 'Boolean');
            }
            if (data.hasOwnProperty('clicked')) {
                obj['clicked'] = ApiClient.convertToType(data['clicked'], 'Boolean');
            }
            if (data.hasOwnProperty('opened')) {
                obj['opened'] = ApiClient.convertToType(data['opened'], 'Boolean');
            }
            if (data.hasOwnProperty('contactCreated')) {
                obj['contactCreated'] = ApiClient.convertToType(data['contactCreated'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RestRWebhook</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RestRWebhook</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }

/**
     * @return {String}
     */
    getId() {
        return this.id;
    }

    /**
     * @param {String} id
     */
    setId(id) {
        this['id'] = id;
    }
/**
     * Returns Webhook endpoint URL
     * @return {String}
     */
    getUrl() {
        return this.url;
    }

    /**
     * Sets Webhook endpoint URL
     * @param {String} url Webhook endpoint URL
     */
    setUrl(url) {
        this['url'] = url;
    }
/**
     * Returns Whether webhook is enabled
     * @return {Boolean}
     */
    getEnabled() {
        return this.enabled;
    }

    /**
     * Sets Whether webhook is enabled
     * @param {Boolean} enabled Whether webhook is enabled
     */
    setEnabled(enabled) {
        this['enabled'] = enabled;
    }
/**
     * Returns Trigger webhook when a contact unsubscribes
     * @return {Boolean}
     */
    getUnsubscribed() {
        return this.unsubscribed;
    }

    /**
     * Sets Trigger webhook when a contact unsubscribes
     * @param {Boolean} unsubscribed Trigger webhook when a contact unsubscribes
     */
    setUnsubscribed(unsubscribed) {
        this['unsubscribed'] = unsubscribed;
    }
/**
     * Returns Trigger webhook when an email is dropped
     * @return {Boolean}
     */
    getDropped() {
        return this.dropped;
    }

    /**
     * Sets Trigger webhook when an email is dropped
     * @param {Boolean} dropped Trigger webhook when an email is dropped
     */
    setDropped(dropped) {
        this['dropped'] = dropped;
    }
/**
     * Returns Trigger webhook when an email bounces
     * @return {Boolean}
     */
    getBounced() {
        return this.bounced;
    }

    /**
     * Sets Trigger webhook when an email bounces
     * @param {Boolean} bounced Trigger webhook when an email bounces
     */
    setBounced(bounced) {
        this['bounced'] = bounced;
    }
/**
     * Returns Trigger webhook when an email is marked as spam
     * @return {Boolean}
     */
    getMarkedSpam() {
        return this.markedSpam;
    }

    /**
     * Sets Trigger webhook when an email is marked as spam
     * @param {Boolean} markedSpam Trigger webhook when an email is marked as spam
     */
    setMarkedSpam(markedSpam) {
        this['markedSpam'] = markedSpam;
    }
/**
     * Returns Trigger webhook when a link in the email is clicked
     * @return {Boolean}
     */
    getClicked() {
        return this.clicked;
    }

    /**
     * Sets Trigger webhook when a link in the email is clicked
     * @param {Boolean} clicked Trigger webhook when a link in the email is clicked
     */
    setClicked(clicked) {
        this['clicked'] = clicked;
    }
/**
     * Returns Trigger webhook when an email is opened
     * @return {Boolean}
     */
    getOpened() {
        return this.opened;
    }

    /**
     * Sets Trigger webhook when an email is opened
     * @param {Boolean} opened Trigger webhook when an email is opened
     */
    setOpened(opened) {
        this['opened'] = opened;
    }
/**
     * Returns Trigger webhook when a new contact is created
     * @return {Boolean}
     */
    getContactCreated() {
        return this.contactCreated;
    }

    /**
     * Sets Trigger webhook when a new contact is created
     * @param {Boolean} contactCreated Trigger webhook when a new contact is created
     */
    setContactCreated(contactCreated) {
        this['contactCreated'] = contactCreated;
    }

}



/**
 * @member {String} id
 */
RestRWebhook.prototype['id'] = undefined;

/**
 * Webhook endpoint URL
 * @member {String} url
 */
RestRWebhook.prototype['url'] = undefined;

/**
 * Whether webhook is enabled
 * @member {Boolean} enabled
 * @default true
 */
RestRWebhook.prototype['enabled'] = true;

/**
 * Trigger webhook when a contact unsubscribes
 * @member {Boolean} unsubscribed
 * @default false
 */
RestRWebhook.prototype['unsubscribed'] = false;

/**
 * Trigger webhook when an email is dropped
 * @member {Boolean} dropped
 * @default false
 */
RestRWebhook.prototype['dropped'] = false;

/**
 * Trigger webhook when an email bounces
 * @member {Boolean} bounced
 * @default false
 */
RestRWebhook.prototype['bounced'] = false;

/**
 * Trigger webhook when an email is marked as spam
 * @member {Boolean} markedSpam
 * @default false
 */
RestRWebhook.prototype['markedSpam'] = false;

/**
 * Trigger webhook when a link in the email is clicked
 * @member {Boolean} clicked
 * @default false
 */
RestRWebhook.prototype['clicked'] = false;

/**
 * Trigger webhook when an email is opened
 * @member {Boolean} opened
 * @default false
 */
RestRWebhook.prototype['opened'] = false;

/**
 * Trigger webhook when a new contact is created
 * @member {Boolean} contactCreated
 * @default false
 */
RestRWebhook.prototype['contactCreated'] = false;






export default RestRWebhook;

