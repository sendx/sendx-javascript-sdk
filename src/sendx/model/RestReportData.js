/**
 * SendX REST API
 * # SendX REST API Documentation  ## üöÄ Introduction  The SendX API is organized around REST principles. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  **Key Features:** - üîí **Security**: Team-based authentication with optional member-level access - üéØ **Resource-Oriented**: RESTful design with clear resource boundaries - üìä **Rich Data Models**: Three-layer model system (Input/Output/Internal) - üîó **Relationships**: Automatic prefix handling for resource relationships - üìà **Scalable**: Built for high-volume email marketing operations  ## üèóÔ∏è Architecture Overview  SendX uses a three-layer model architecture:  1. **Input Models** (`RestE*`): For API requests 2. **Output Models** (`RestR*`): For API responses with prefixed IDs 3. **Internal Models**: Core business logic (not exposed in API)  ## üîê Security & Authentication  SendX uses API key authentication:  ### Team API Key ```http X-Team-ApiKey: YOUR_TEAM_API_KEY ``` - **Required for all requests** - Team-level access to resources - Available in SendX Settings ‚Üí Team API Key  ## üÜî Encrypted ID System  SendX uses encrypted IDs for security and better developer experience:  - **Internal IDs**: Sequential integers (not exposed) - **Encrypted IDs**: 22-character alphanumeric strings - **Prefixed IDs**: Resource-type prefixes in API responses (`contact_<22-char-id>`)  ### ID Format  **All resource IDs follow this pattern:** ``` <resource_prefix>_<22_character_alphanumeric_string> ```  **Example:** ```json {   \"id\": \"contact_BnKjkbBBS500CoBCP0oChQ\",   \"lists\": [\"list_OcuxJHdiAvujmwQVJfd3ss\", \"list_0tOFLp5RgV7s3LNiHrjGYs\"],   \"tags\": [\"tag_UhsDkjL772Qbj5lWtT62VK\", \"tag_fL7t9lsnZ9swvx2HrtQ9wM\"] } ```  ## üìö Resource Prefixes  | Resource | Prefix | Example | |----------|--------|---------| | Contact | `contact_` | `contact_BnKjkbBBS500CoBCP0oChQ` | | Campaign | `campaign_` | `campaign_LUE9BTxmksSmqHWbh96zsn` | | List | `list_` | `list_OcuxJHdiAvujmwQVJfd3ss` | | Tag | `tag_` | `tag_UhsDkjL772Qbj5lWtT62VK` | | Sender | `sender_` | `sender_4vK3WFhMgvOwUNyaL4QxCD` | | Template | `template_` | `template_f3lJvTEhSjKGVb5Lwc5SWS` | | Custom Field | `field_` | `field_MnuqBAG2NPLm7PZMWbjQxt` | | Webhook | `webhook_` | `webhook_9l154iiXlZoPo7vngmamee` | | Post | `post_` | `post_XyZ123aBc456DeF789GhI` | | Post Category | `post_category_` | `post_category_YzS1wOU20yw87UUHKxMzwn` | | Post Tag | `post_tag_` | `post_tag_123XyZ456AbC` | | Member | `member_` | `member_JkL012MnO345PqR678` |  ## üéØ Best Practices  ### Error Handling - **Always check status codes**: 2xx = success, 4xx = client error, 5xx = server error - **Read error messages**: Descriptive messages help debug issues - **Handle rate limits**: Respect API rate limits for optimal performance  ### Data Validation - **Email format**: Must be valid email addresses - **Required fields**: Check documentation for mandatory fields - **Field lengths**: Respect maximum length constraints  ### Performance - **Pagination**: Use offset/limit for large datasets - **Batch operations**: Process multiple items when supported - **Caching**: Cache responses when appropriate  ## üõ†Ô∏è SDKs & Integration  Official SDKs available for: - [Golang](https://github.com/sendx/sendx-go-sdk) - [Python](https://github.com/sendx/sendx-python-sdk) - [Ruby](https://github.com/sendx/sendx-ruby-sdk) - [Java](https://github.com/sendx/sendx-java-sdk) - [PHP](https://github.com/sendx/sendx-php-sdk) - [JavaScript](https://github.com/sendx/sendx-javascript-sdk)  ## üìû Support  Need help? Contact us: - üí¨ **Website Chat**: Available on sendx.io - üìß **Email**: hello@sendx.io - üìö **Documentation**: Full guides at help.sendx.io  ---  **API Endpoint:** `https://api.sendx.io/api/v1/rest`  [<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\">](https://god.gw.postman.com/run-collection/33476323-44b198b0-5219-4619-a01f-cfc24d573885?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D33476323-44b198b0-5219-4619-a01f-cfc24d573885%26entityType%3Dcollection%26workspaceId%3D6b1e4f65-96a9-4136-9512-6266c852517e) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LinkStat from './LinkStat';

/**
 * The RestReportData model module.
 * @module sendx/model/RestReportData
 * @version 1.0.0
 */
class RestReportData {
    /**
     * Constructs a new <code>RestReportData</code>.
     * @alias module:sendx/model/RestReportData
     */
    constructor() { 
        
        RestReportData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RestReportData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sendx/model/RestReportData} obj Optional instance to populate.
     * @return {module:sendx/model/RestReportData} The populated <code>RestReportData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RestReportData();

            if (data.hasOwnProperty('campaignId')) {
                obj['campaignId'] = ApiClient.convertToType(data['campaignId'], 'String');
            }
            if (data.hasOwnProperty('linkStats')) {
                obj['linkStats'] = ApiClient.convertToType(data['linkStats'], [LinkStat]);
            }
            if (data.hasOwnProperty('clickedUniqueContactCount')) {
                obj['clickedUniqueContactCount'] = ApiClient.convertToType(data['clickedUniqueContactCount'], 'Number');
            }
            if (data.hasOwnProperty('openedUniqueContactCount')) {
                obj['openedUniqueContactCount'] = ApiClient.convertToType(data['openedUniqueContactCount'], 'Number');
            }
            if (data.hasOwnProperty('sentContactCount')) {
                obj['sentContactCount'] = ApiClient.convertToType(data['sentContactCount'], 'Number');
            }
            if (data.hasOwnProperty('unsubscribeContactCount')) {
                obj['unsubscribeContactCount'] = ApiClient.convertToType(data['unsubscribeContactCount'], 'Number');
            }
            if (data.hasOwnProperty('bounceContactCount')) {
                obj['bounceContactCount'] = ApiClient.convertToType(data['bounceContactCount'], 'Number');
            }
            if (data.hasOwnProperty('spamContactCount')) {
                obj['spamContactCount'] = ApiClient.convertToType(data['spamContactCount'], 'Number');
            }
            if (data.hasOwnProperty('clickedContactCount')) {
                obj['clickedContactCount'] = ApiClient.convertToType(data['clickedContactCount'], 'Number');
            }
            if (data.hasOwnProperty('openedContactCount')) {
                obj['openedContactCount'] = ApiClient.convertToType(data['openedContactCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RestReportData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RestReportData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['campaignId'] && !(typeof data['campaignId'] === 'string' || data['campaignId'] instanceof String)) {
            throw new Error("Expected the field `campaignId` to be a primitive type in the JSON string but got " + data['campaignId']);
        }
        if (data['linkStats']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['linkStats'])) {
                throw new Error("Expected the field `linkStats` to be an array in the JSON data but got " + data['linkStats']);
            }
            // validate the optional field `linkStats` (array)
            for (const item of data['linkStats']) {
                LinkStat.validateJSON(item);
            };
        }

        return true;
    }

/**
     * Returns Unique identifier of the campaign
     * @return {String}
     */
    getCampaignId() {
        return this.campaignId;
    }

    /**
     * Sets Unique identifier of the campaign
     * @param {String} campaignId Unique identifier of the campaign
     */
    setCampaignId(campaignId) {
        this['campaignId'] = campaignId;
    }
/**
     * @return {Array.<module:sendx/model/LinkStat>}
     */
    getLinkStats() {
        return this.linkStats;
    }

    /**
     * @param {Array.<module:sendx/model/LinkStat>} linkStats
     */
    setLinkStats(linkStats) {
        this['linkStats'] = linkStats;
    }
/**
     * Returns Total number of unique contacts who clicked on the link
     * @return {Number}
     */
    getClickedUniqueContactCount() {
        return this.clickedUniqueContactCount;
    }

    /**
     * Sets Total number of unique contacts who clicked on the link
     * @param {Number} clickedUniqueContactCount Total number of unique contacts who clicked on the link
     */
    setClickedUniqueContactCount(clickedUniqueContactCount) {
        this['clickedUniqueContactCount'] = clickedUniqueContactCount;
    }
/**
     * Returns Total number of unique contacts who opened the link
     * @return {Number}
     */
    getOpenedUniqueContactCount() {
        return this.openedUniqueContactCount;
    }

    /**
     * Sets Total number of unique contacts who opened the link
     * @param {Number} openedUniqueContactCount Total number of unique contacts who opened the link
     */
    setOpenedUniqueContactCount(openedUniqueContactCount) {
        this['openedUniqueContactCount'] = openedUniqueContactCount;
    }
/**
     * Returns Total number of contacts who sent the link
     * @return {Number}
     */
    getSentContactCount() {
        return this.sentContactCount;
    }

    /**
     * Sets Total number of contacts who sent the link
     * @param {Number} sentContactCount Total number of contacts who sent the link
     */
    setSentContactCount(sentContactCount) {
        this['sentContactCount'] = sentContactCount;
    }
/**
     * Returns Total number of contacts who unsubscribed from the link
     * @return {Number}
     */
    getUnsubscribeContactCount() {
        return this.unsubscribeContactCount;
    }

    /**
     * Sets Total number of contacts who unsubscribed from the link
     * @param {Number} unsubscribeContactCount Total number of contacts who unsubscribed from the link
     */
    setUnsubscribeContactCount(unsubscribeContactCount) {
        this['unsubscribeContactCount'] = unsubscribeContactCount;
    }
/**
     * Returns Total number of contacts who bounced the link
     * @return {Number}
     */
    getBounceContactCount() {
        return this.bounceContactCount;
    }

    /**
     * Sets Total number of contacts who bounced the link
     * @param {Number} bounceContactCount Total number of contacts who bounced the link
     */
    setBounceContactCount(bounceContactCount) {
        this['bounceContactCount'] = bounceContactCount;
    }
/**
     * Returns Total number of contacts who marked the link as spam
     * @return {Number}
     */
    getSpamContactCount() {
        return this.spamContactCount;
    }

    /**
     * Sets Total number of contacts who marked the link as spam
     * @param {Number} spamContactCount Total number of contacts who marked the link as spam
     */
    setSpamContactCount(spamContactCount) {
        this['spamContactCount'] = spamContactCount;
    }
/**
     * Returns Total number of contacts who clicked on the link
     * @return {Number}
     */
    getClickedContactCount() {
        return this.clickedContactCount;
    }

    /**
     * Sets Total number of contacts who clicked on the link
     * @param {Number} clickedContactCount Total number of contacts who clicked on the link
     */
    setClickedContactCount(clickedContactCount) {
        this['clickedContactCount'] = clickedContactCount;
    }
/**
     * Returns Total number of contacts who opened the link
     * @return {Number}
     */
    getOpenedContactCount() {
        return this.openedContactCount;
    }

    /**
     * Sets Total number of contacts who opened the link
     * @param {Number} openedContactCount Total number of contacts who opened the link
     */
    setOpenedContactCount(openedContactCount) {
        this['openedContactCount'] = openedContactCount;
    }

}



/**
 * Unique identifier of the campaign
 * @member {String} campaignId
 */
RestReportData.prototype['campaignId'] = undefined;

/**
 * @member {Array.<module:sendx/model/LinkStat>} linkStats
 */
RestReportData.prototype['linkStats'] = undefined;

/**
 * Total number of unique contacts who clicked on the link
 * @member {Number} clickedUniqueContactCount
 */
RestReportData.prototype['clickedUniqueContactCount'] = undefined;

/**
 * Total number of unique contacts who opened the link
 * @member {Number} openedUniqueContactCount
 */
RestReportData.prototype['openedUniqueContactCount'] = undefined;

/**
 * Total number of contacts who sent the link
 * @member {Number} sentContactCount
 */
RestReportData.prototype['sentContactCount'] = undefined;

/**
 * Total number of contacts who unsubscribed from the link
 * @member {Number} unsubscribeContactCount
 */
RestReportData.prototype['unsubscribeContactCount'] = undefined;

/**
 * Total number of contacts who bounced the link
 * @member {Number} bounceContactCount
 */
RestReportData.prototype['bounceContactCount'] = undefined;

/**
 * Total number of contacts who marked the link as spam
 * @member {Number} spamContactCount
 */
RestReportData.prototype['spamContactCount'] = undefined;

/**
 * Total number of contacts who clicked on the link
 * @member {Number} clickedContactCount
 */
RestReportData.prototype['clickedContactCount'] = undefined;

/**
 * Total number of contacts who opened the link
 * @member {Number} openedContactCount
 */
RestReportData.prototype['openedContactCount'] = undefined;






export default RestReportData;

