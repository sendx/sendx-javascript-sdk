/**
 * SendX REST API
 * # Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RevenueEventRequest model module.
 * @module sendx/model/RevenueEventRequest
 * @version 1.0.0
 */
class RevenueEventRequest {
    /**
     * Constructs a new <code>RevenueEventRequest</code>.
     * @alias module:sendx/model/RevenueEventRequest
     * @param identifier {String} Unique identifier for the contact.
     * @param amount {Number} Recognized revenue amount associated with the event.
     * @param currency {String} Currency code (ISO 4217) for the revenue (e.g., 'USD', 'EUR', 'INR').
     * @param source {String} Source of the revenue (e.g., 'website', 'mobile app', 'partner referral').
     * @param time {Number} Unix timestamp indicating when the revenue event occurred.
     */
    constructor(identifier, amount, currency, source, time) { 
        
        RevenueEventRequest.initialize(this, identifier, amount, currency, source, time);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, identifier, amount, currency, source, time) { 
        obj['identifier'] = identifier;
        obj['amount'] = amount;
        obj['currency'] = currency;
        obj['source'] = source;
        obj['time'] = time;
    }

    /**
     * Constructs a <code>RevenueEventRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sendx/model/RevenueEventRequest} obj Optional instance to populate.
     * @return {module:sendx/model/RevenueEventRequest} The populated <code>RevenueEventRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RevenueEventRequest();

            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RevenueEventRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RevenueEventRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RevenueEventRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }

        return true;
    }

/**
     * Returns Unique identifier for the contact.
     * @return {String}
     */
    getIdentifier() {
        return this.identifier;
    }

    /**
     * Sets Unique identifier for the contact.
     * @param {String} identifier Unique identifier for the contact.
     */
    setIdentifier(identifier) {
        this['identifier'] = identifier;
    }
/**
     * Returns Recognized revenue amount associated with the event.
     * @return {Number}
     */
    getAmount() {
        return this.amount;
    }

    /**
     * Sets Recognized revenue amount associated with the event.
     * @param {Number} amount Recognized revenue amount associated with the event.
     */
    setAmount(amount) {
        this['amount'] = amount;
    }
/**
     * Returns Currency code (ISO 4217) for the revenue (e.g., 'USD', 'EUR', 'INR').
     * @return {String}
     */
    getCurrency() {
        return this.currency;
    }

    /**
     * Sets Currency code (ISO 4217) for the revenue (e.g., 'USD', 'EUR', 'INR').
     * @param {String} currency Currency code (ISO 4217) for the revenue (e.g., 'USD', 'EUR', 'INR').
     */
    setCurrency(currency) {
        this['currency'] = currency;
    }
/**
     * Returns Source of the revenue (e.g., 'website', 'mobile app', 'partner referral').
     * @return {String}
     */
    getSource() {
        return this.source;
    }

    /**
     * Sets Source of the revenue (e.g., 'website', 'mobile app', 'partner referral').
     * @param {String} source Source of the revenue (e.g., 'website', 'mobile app', 'partner referral').
     */
    setSource(source) {
        this['source'] = source;
    }
/**
     * Returns Unix timestamp indicating when the revenue event occurred.
     * @return {Number}
     */
    getTime() {
        return this.time;
    }

    /**
     * Sets Unix timestamp indicating when the revenue event occurred.
     * @param {Number} time Unix timestamp indicating when the revenue event occurred.
     */
    setTime(time) {
        this['time'] = time;
    }

}

RevenueEventRequest.RequiredProperties = ["identifier", "amount", "currency", "source", "time"];

/**
 * Unique identifier for the contact.
 * @member {String} identifier
 */
RevenueEventRequest.prototype['identifier'] = undefined;

/**
 * Recognized revenue amount associated with the event.
 * @member {Number} amount
 */
RevenueEventRequest.prototype['amount'] = undefined;

/**
 * Currency code (ISO 4217) for the revenue (e.g., 'USD', 'EUR', 'INR').
 * @member {String} currency
 */
RevenueEventRequest.prototype['currency'] = undefined;

/**
 * Source of the revenue (e.g., 'website', 'mobile app', 'partner referral').
 * @member {String} source
 */
RevenueEventRequest.prototype['source'] = undefined;

/**
 * Unix timestamp indicating when the revenue event occurred.
 * @member {Number} time
 */
RevenueEventRequest.prototype['time'] = undefined;






export default RevenueEventRequest;

