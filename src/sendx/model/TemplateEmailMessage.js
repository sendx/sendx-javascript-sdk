/**
 * SendX REST API
 * # SendX REST API Documentation  ## üöÄ Introduction  The SendX API is organized around REST principles. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  **Key Features:** - üîí **Security**: Team-based authentication with optional member-level access - üéØ **Resource-Oriented**: RESTful design with clear resource boundaries - üìä **Rich Data Models**: Three-layer model system (Input/Output/Internal) - üîó **Relationships**: Automatic prefix handling for resource relationships - üìà **Scalable**: Built for high-volume email marketing operations  ## üèóÔ∏è Architecture Overview  SendX uses a three-layer model architecture:  1. **Input Models** (`RestE*`): For API requests 2. **Output Models** (`RestR*`): For API responses with prefixed IDs 3. **Internal Models**: Core business logic (not exposed in API)  ## üîê Security & Authentication  SendX uses API key authentication:  ### Team API Key ```http X-Team-ApiKey: YOUR_TEAM_API_KEY ``` - **Required for all requests** - Team-level access to resources - Available in SendX Settings ‚Üí Team API Key  ## üÜî Encrypted ID System  SendX uses encrypted IDs for security and better developer experience:  - **Internal IDs**: Sequential integers (not exposed) - **Encrypted IDs**: 22-character alphanumeric strings - **Prefixed IDs**: Resource-type prefixes in API responses (`contact_<22-char-id>`)  ### ID Format  **All resource IDs follow this pattern:** ``` <resource_prefix>_<22_character_alphanumeric_string> ```  **Example:** ```json {   \"id\": \"contact_BnKjkbBBS500CoBCP0oChQ\",   \"lists\": [\"list_OcuxJHdiAvujmwQVJfd3ss\", \"list_0tOFLp5RgV7s3LNiHrjGYs\"],   \"tags\": [\"tag_UhsDkjL772Qbj5lWtT62VK\", \"tag_fL7t9lsnZ9swvx2HrtQ9wM\"] } ```  ## üìö Resource Prefixes  | Resource | Prefix | Example | |----------|--------|---------| | Contact | `contact_` | `contact_BnKjkbBBS500CoBCP0oChQ` | | Campaign | `campaign_` | `campaign_LUE9BTxmksSmqHWbh96zsn` | | List | `list_` | `list_OcuxJHdiAvujmwQVJfd3ss` | | Tag | `tag_` | `tag_UhsDkjL772Qbj5lWtT62VK` | | Sender | `sender_` | `sender_4vK3WFhMgvOwUNyaL4QxCD` | | Template | `template_` | `template_f3lJvTEhSjKGVb5Lwc5SWS` | | Custom Field | `field_` | `field_MnuqBAG2NPLm7PZMWbjQxt` | | Webhook | `webhook_` | `webhook_9l154iiXlZoPo7vngmamee` | | Post | `post_` | `post_XyZ123aBc456DeF789GhI` | | Post Category | `post_category_` | `post_category_YzS1wOU20yw87UUHKxMzwn` | | Post Tag | `post_tag_` | `post_tag_123XyZ456AbC` | | Member | `member_` | `member_JkL012MnO345PqR678` |  ## üéØ Best Practices  ### Error Handling - **Always check status codes**: 2xx = success, 4xx = client error, 5xx = server error - **Read error messages**: Descriptive messages help debug issues - **Handle rate limits**: Respect API rate limits for optimal performance  ### Data Validation - **Email format**: Must be valid email addresses - **Required fields**: Check documentation for mandatory fields - **Field lengths**: Respect maximum length constraints  ### Performance - **Pagination**: Use offset/limit for large datasets - **Batch operations**: Process multiple items when supported - **Caching**: Cache responses when appropriate  ## üõ†Ô∏è SDKs & Integration  Official SDKs available for: - [Golang](https://github.com/sendx/sendx-go-sdk) - [Python](https://github.com/sendx/sendx-python-sdk) - [Ruby](https://github.com/sendx/sendx-ruby-sdk) - [Java](https://github.com/sendx/sendx-java-sdk) - [PHP](https://github.com/sendx/sendx-php-sdk) - [JavaScript](https://github.com/sendx/sendx-javascript-sdk)  ## üìû Support  Need help? Contact us: - üí¨ **Website Chat**: Available on sendx.io - üìß **Email**: hello@sendx.io - üìö **Documentation**: Full guides at help.sendx.io  ---  **API Endpoint:** `https://api.sendx.io/api/v1/rest`  [<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\">](https://god.gw.postman.com/run-collection/33476323-44b198b0-5219-4619-a01f-cfc24d573885?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D33476323-44b198b0-5219-4619-a01f-cfc24d573885%26entityType%3Dcollection%26workspaceId%3D6b1e4f65-96a9-4136-9512-6266c852517e) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import XFrom from './XFrom';
import XReplyTo from './XReplyTo';
import XTo from './XTo';

/**
 * The TemplateEmailMessage model module.
 * @module sendx/model/TemplateEmailMessage
 * @version 1.0.0
 */
class TemplateEmailMessage {
    /**
     * Constructs a new <code>TemplateEmailMessage</code>.
     * @alias module:sendx/model/TemplateEmailMessage
     * @param from {module:sendx/model/XFrom} 
     * @param to {Array.<module:sendx/model/XTo>} 
     * @param subject {String} Override template subject
     */
    constructor(from, to, subject) { 
        
        TemplateEmailMessage.initialize(this, from, to, subject);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, from, to, subject) { 
        obj['from'] = from;
        obj['to'] = to;
        obj['subject'] = subject;
    }

    /**
     * Constructs a <code>TemplateEmailMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sendx/model/TemplateEmailMessage} obj Optional instance to populate.
     * @return {module:sendx/model/TemplateEmailMessage} The populated <code>TemplateEmailMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TemplateEmailMessage();

            if (data.hasOwnProperty('from')) {
                obj['from'] = XFrom.constructFromObject(data['from']);
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], [XTo]);
            }
            if (data.hasOwnProperty('replyTo')) {
                obj['replyTo'] = XReplyTo.constructFromObject(data['replyTo']);
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('template')) {
                obj['template'] = ApiClient.convertToType(data['template'], 'String');
            }
            if (data.hasOwnProperty('templateId')) {
                obj['templateId'] = ApiClient.convertToType(data['templateId'], 'String');
            }
            if (data.hasOwnProperty('variables')) {
                obj['variables'] = ApiClient.convertToType(data['variables'], {'String': Object});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TemplateEmailMessage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TemplateEmailMessage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TemplateEmailMessage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `from`
        if (data['from']) { // data not null
          XFrom.validateJSON(data['from']);
        }
        if (data['to']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['to'])) {
                throw new Error("Expected the field `to` to be an array in the JSON data but got " + data['to']);
            }
            // validate the optional field `to` (array)
            for (const item of data['to']) {
                XTo.validateJSON(item);
            };
        }
        // validate the optional field `replyTo`
        if (data['replyTo']) { // data not null
          XReplyTo.validateJSON(data['replyTo']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }
        // ensure the json data is a string
        if (data['template'] && !(typeof data['template'] === 'string' || data['template'] instanceof String)) {
            throw new Error("Expected the field `template` to be a primitive type in the JSON string but got " + data['template']);
        }
        // ensure the json data is a string
        if (data['templateId'] && !(typeof data['templateId'] === 'string' || data['templateId'] instanceof String)) {
            throw new Error("Expected the field `templateId` to be a primitive type in the JSON string but got " + data['templateId']);
        }

        return true;
    }

/**
     * @return {module:sendx/model/XFrom}
     */
    getFrom() {
        return this.from;
    }

    /**
     * @param {module:sendx/model/XFrom} from
     */
    setFrom(from) {
        this['from'] = from;
    }
/**
     * @return {Array.<module:sendx/model/XTo>}
     */
    getTo() {
        return this.to;
    }

    /**
     * @param {Array.<module:sendx/model/XTo>} to
     */
    setTo(to) {
        this['to'] = to;
    }
/**
     * @return {module:sendx/model/XReplyTo}
     */
    getReplyTo() {
        return this.replyTo;
    }

    /**
     * @param {module:sendx/model/XReplyTo} replyTo
     */
    setReplyTo(replyTo) {
        this['replyTo'] = replyTo;
    }
/**
     * Returns Override template subject
     * @return {String}
     */
    getSubject() {
        return this.subject;
    }

    /**
     * Sets Override template subject
     * @param {String} subject Override template subject
     */
    setSubject(subject) {
        this['subject'] = subject;
    }
/**
     * @return {String}
     */
    getTemplate() {
        return this.template;
    }

    /**
     * @param {String} template
     */
    setTemplate(template) {
        this['template'] = template;
    }
/**
     * Returns Template identifier
     * @return {String}
     */
    getTemplateId() {
        return this.templateId;
    }

    /**
     * Sets Template identifier
     * @param {String} templateId Template identifier
     */
    setTemplateId(templateId) {
        this['templateId'] = templateId;
    }
/**
     * Returns Template variables for substitution
     * @return {Object.<String, Object>}
     */
    getVariables() {
        return this.variables;
    }

    /**
     * Sets Template variables for substitution
     * @param {Object.<String, Object>} variables Template variables for substitution
     */
    setVariables(variables) {
        this['variables'] = variables;
    }

}

TemplateEmailMessage.RequiredProperties = ["from", "to", "subject"];

/**
 * @member {module:sendx/model/XFrom} from
 */
TemplateEmailMessage.prototype['from'] = undefined;

/**
 * @member {Array.<module:sendx/model/XTo>} to
 */
TemplateEmailMessage.prototype['to'] = undefined;

/**
 * @member {module:sendx/model/XReplyTo} replyTo
 */
TemplateEmailMessage.prototype['replyTo'] = undefined;

/**
 * Override template subject
 * @member {String} subject
 */
TemplateEmailMessage.prototype['subject'] = undefined;

/**
 * @member {String} template
 */
TemplateEmailMessage.prototype['template'] = undefined;

/**
 * Template identifier
 * @member {String} templateId
 */
TemplateEmailMessage.prototype['templateId'] = undefined;

/**
 * Template variables for substitution
 * @member {Object.<String, Object>} variables
 */
TemplateEmailMessage.prototype['variables'] = undefined;






export default TemplateEmailMessage;

